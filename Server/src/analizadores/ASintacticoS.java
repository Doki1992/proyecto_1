
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 26 19:27:39 CST 2016
//----------------------------------------------------

package analizadores;

import java.io.*;
import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import java.util.Hashtable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 26 19:27:39 CST 2016
  */
public class ASintacticoS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ASintacticoS() {super();}

  /** Constructor which sets the default scanner. */
  public ASintacticoS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintacticoS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\035\014\000\002\035\011\000\002\035\011" +
    "\000\002\033\004\000\002\033\003\000\002\034\007\000" +
    "\002\034\013\000\002\036\006\000\002\036\010\000\002" +
    "\011\004\000\002\011\003\000\002\027\026\000\002\027" +
    "\011\000\002\027\014\000\002\027\006\000\002\027\014" +
    "\000\002\027\006\000\002\027\014\000\002\027\013\000" +
    "\002\013\004\000\002\013\003\000\002\021\011\000\002" +
    "\021\011\000\002\021\011\000\002\021\011\000\002\021" +
    "\011\000\002\021\011\000\002\021\011\000\002\014\004" +
    "\000\002\014\003\000\002\022\011\000\002\022\011\000" +
    "\002\022\011\000\002\022\011\000\002\022\011\000\002" +
    "\022\011\000\002\015\005\000\002\015\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\016\004\000" +
    "\002\016\003\000\002\024\011\000\002\024\011\000\002" +
    "\024\011\000\002\024\011\000\002\024\011\000\002\024" +
    "\011\000\002\024\011\000\002\024\011\000\002\017\004" +
    "\000\002\017\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\020\004\000\002\020\003\000\002\026\006\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\003" +
    "\000\002\010\004\000\002\010\005\000\002\010\005\000" +
    "\002\010\003\000\002\030\007\000\002\030\003\000\002" +
    "\031\006\000\002\031\003\000\002\032\005\000\002\032" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\003\000\002\006\005\000\002\006\006\000\002" +
    "\006\006\000\002\006\005\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\004\031\005\001\002\000\006\002\u0162\031" +
    "\005\001\002\000\010\032\010\062\007\066\011\001\002" +
    "\000\006\002\uffff\031\uffff\001\002\000\004\040\u014a\001" +
    "\002\000\004\031\102\001\002\000\004\031\012\001\002" +
    "\000\004\064\013\001\002\000\004\065\020\001\002\000" +
    "\004\031\015\001\002\000\004\066\016\001\002\000\004" +
    "\074\017\001\002\000\006\002\ufffc\031\ufffc\001\002\000" +
    "\024\005\022\014\024\023\035\025\031\072\034\075\026" +
    "\076\036\101\025\102\021\001\002\000\060\004\uffa3\005" +
    "\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3" +
    "\017\uffa3\024\uffa3\026\uffa3\031\uffa3\040\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\054\uffa3\060\uffa3\067\uffa3\070\uffa3\071\uffa3" +
    "\074\uffa3\100\uffa3\001\002\000\022\005\022\014\024\023" +
    "\035\025\031\075\026\076\036\101\025\102\021\001\002" +
    "\000\060\004\075\005\076\006\uffad\007\uffad\010\uffad\011" +
    "\uffad\012\uffad\013\uffad\017\uffad\024\uffad\026\uffad\031\uffad" +
    "\040\uffad\046\uffad\047\uffad\050\uffad\054\uffad\060\uffad\067" +
    "\uffad\070\uffad\071\uffad\074\uffad\100\uffad\001\002\000\060" +
    "\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\017\uffa2\024\uffa2\026\uffa2\031\uffa2\040\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\054\uffa2\060\uffa2\067\uffa2\070" +
    "\uffa2\071\uffa2\074\uffa2\100\uffa2\001\002\000\060\004\uffa4" +
    "\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\017\uffa4\024\uffa4\026\uffa4\031\uffa4\040\uffa4\046\uffa4" +
    "\047\uffa4\050\uffa4\054\uffa4\060\uffa4\067\uffa4\070\uffa4\071" +
    "\uffa4\074\uffa4\100\uffa4\001\002\000\004\023\072\001\002" +
    "\000\050\010\uffb0\011\uffb0\012\uffb0\013\uffb0\017\uffb0\024" +
    "\uffb0\026\uffb0\031\uffb0\040\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\054\uffb0\060\uffb0\067\uffb0\070\uffb0\071\uffb0\074\uffb0\100" +
    "\uffb0\001\002\000\050\010\uffb7\011\uffb7\012\uffb7\013\uffb7" +
    "\017\uffb7\024\uffb7\026\uffb7\031\uffb7\040\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\054\uffb7\060\uffb7\067\uffb7\070\uffb7\071\uffb7" +
    "\074\uffb7\100\uffb7\001\002\000\024\005\022\014\024\023" +
    "\035\025\031\072\034\075\026\076\036\101\025\102\021" +
    "\001\002\000\060\004\uffaa\005\uffaa\006\065\007\064\010" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\017\uffaa\024\uffaa\026\uffaa" +
    "\031\uffaa\040\uffaa\046\uffaa\047\uffaa\050\uffaa\054\uffaa\060" +
    "\uffaa\067\uffaa\070\uffaa\071\uffaa\074\uffaa\100\uffaa\001\002" +
    "\000\014\013\051\017\061\067\060\070\050\071\047\001" +
    "\002\000\022\005\022\014\024\023\035\025\031\075\026" +
    "\076\036\101\025\102\021\001\002\000\024\005\022\014" +
    "\024\023\035\025\031\072\034\075\026\076\036\101\025" +
    "\102\021\001\002\000\004\023\044\001\002\000\050\010" +
    "\uffbb\011\040\012\041\013\uffbb\017\uffbb\024\uffbb\026\uffbb" +
    "\031\uffbb\040\uffbb\046\uffbb\047\uffbb\050\uffbb\054\uffbb\060" +
    "\uffbb\067\uffbb\070\uffbb\071\uffbb\074\uffbb\100\uffbb\001\002" +
    "\000\022\005\022\014\024\023\035\025\031\075\026\076" +
    "\036\101\025\102\021\001\002\000\022\005\022\014\024" +
    "\023\035\025\031\075\026\076\036\101\025\102\021\001" +
    "\002\000\050\010\uffb8\011\uffb8\012\uffb8\013\uffb8\017\uffb8" +
    "\024\uffb8\026\uffb8\031\uffb8\040\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\054\uffb8\060\uffb8\067\uffb8\070\uffb8\071\uffb8\074\uffb8" +
    "\100\uffb8\001\002\000\050\010\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\017\uffb9\024\uffb9\026\uffb9\031\uffb9\040\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\054\uffb9\060\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\074\uffb9\100\uffb9\001\002\000\024\005\022\014\024" +
    "\023\035\025\031\072\034\075\026\076\036\101\025\102" +
    "\021\001\002\000\012\013\051\024\046\070\050\071\047" +
    "\001\002\000\060\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\017\uffa7\024\uffa7\026\uffa7" +
    "\031\uffa7\040\uffa7\046\uffa7\047\uffa7\050\uffa7\054\uffa7\060" +
    "\uffa7\067\uffa7\070\uffa7\071\uffa7\074\uffa7\100\uffa7\001\002" +
    "\000\024\005\022\014\024\023\035\025\031\072\034\075" +
    "\026\076\036\101\025\102\021\001\002\000\024\005\022" +
    "\014\024\023\035\025\031\072\034\075\026\076\036\101" +
    "\025\102\021\001\002\000\024\005\022\014\024\023\035" +
    "\025\031\072\034\075\026\076\036\101\025\102\021\001" +
    "\002\000\050\010\uffbd\011\040\012\041\013\uffbd\017\uffbd" +
    "\024\uffbd\026\uffbd\031\uffbd\040\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\054\uffbd\060\uffbd\067\uffbd\070\uffbd\071\uffbd\074\uffbd" +
    "\100\uffbd\001\002\000\050\010\uffbe\011\040\012\041\013" +
    "\uffbe\017\uffbe\024\uffbe\026\uffbe\031\uffbe\040\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\054\uffbe\060\uffbe\067\uffbe\070\uffbe\071" +
    "\uffbe\074\uffbe\100\uffbe\001\002\000\050\010\uffbc\011\040" +
    "\012\041\013\uffbc\017\uffbc\024\uffbc\026\uffbc\031\uffbc\040" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\054\uffbc\060\uffbc\067\uffbc" +
    "\070\uffbc\071\uffbc\074\uffbc\100\uffbc\001\002\000\012\013" +
    "\051\024\056\070\050\071\047\001\002\000\060\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\017\uffa9\024\uffa9\026\uffa9\031\uffa9\040\uffa9\046\uffa9" +
    "\047\uffa9\050\uffa9\054\uffa9\060\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\074\uffa9\100\uffa9\001\002\000\050\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\017\uffba\024\uffba\026\uffba\031\uffba\040" +
    "\uffba\046\uffba\047\uffba\050\uffba\054\uffba\060\uffba\067\uffba" +
    "\070\uffba\071\uffba\074\uffba\100\uffba\001\002\000\024\005" +
    "\022\014\024\023\035\025\031\072\034\075\026\076\036" +
    "\101\025\102\021\001\002\000\004\031\ufff7\001\002\000" +
    "\012\013\051\017\063\070\050\071\047\001\002\000\004" +
    "\031\ufff6\001\002\000\022\005\022\014\024\023\035\025" +
    "\031\075\026\076\036\101\025\102\021\001\002\000\022" +
    "\005\022\014\024\023\035\025\031\075\026\076\036\101" +
    "\025\102\021\001\002\000\060\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\017\uffac\024" +
    "\uffac\026\uffac\031\uffac\040\uffac\046\uffac\047\uffac\050\uffac" +
    "\054\uffac\060\uffac\067\uffac\070\uffac\071\uffac\074\uffac\100" +
    "\uffac\001\002\000\060\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\012\uffab\013\uffab\017\uffab\024\uffab\026" +
    "\uffab\031\uffab\040\uffab\046\uffab\047\uffab\050\uffab\054\uffab" +
    "\060\uffab\067\uffab\070\uffab\071\uffab\074\uffab\100\uffab\001" +
    "\002\000\012\013\051\026\071\070\050\071\047\001\002" +
    "\000\060\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\017\uffa6\024\uffa6\026\uffa6\031\uffa6" +
    "\040\uffa6\046\uffa6\047\uffa6\050\uffa6\054\uffa6\060\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\074\uffa6\100\uffa6\001\002\000\024" +
    "\005\022\014\024\023\035\025\031\072\034\075\026\076" +
    "\036\101\025\102\021\001\002\000\012\013\051\024\074" +
    "\070\050\071\047\001\002\000\060\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\017\uffa8" +
    "\024\uffa8\026\uffa8\031\uffa8\040\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\054\uffa8\060\uffa8\067\uffa8\070\uffa8\071\uffa8\074\uffa8" +
    "\100\uffa8\001\002\000\022\005\022\014\024\023\035\025" +
    "\031\075\026\076\036\101\025\102\021\001\002\000\022" +
    "\005\022\014\024\023\035\025\031\075\026\076\036\101" +
    "\025\102\021\001\002\000\060\004\uffae\005\uffae\006\uffae" +
    "\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\017\uffae\024" +
    "\uffae\026\uffae\031\uffae\040\uffae\046\uffae\047\uffae\050\uffae" +
    "\054\uffae\060\uffae\067\uffae\070\uffae\071\uffae\074\uffae\100" +
    "\uffae\001\002\000\060\004\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\017\uffaf\024\uffaf\026" +
    "\uffaf\031\uffaf\040\uffaf\046\uffaf\047\uffaf\050\uffaf\054\uffaf" +
    "\060\uffaf\067\uffaf\070\uffaf\071\uffaf\074\uffaf\100\uffaf\001" +
    "\002\000\060\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\017\uffa5\024\uffa5\026\uffa5\031" +
    "\uffa5\040\uffa5\046\uffa5\047\uffa5\050\uffa5\054\uffa5\060\uffa5" +
    "\067\uffa5\070\uffa5\071\uffa5\074\uffa5\100\uffa5\001\002\000" +
    "\004\031\104\001\002\000\004\031\u0146\001\002\000\014" +
    "\033\110\037\107\045\112\061\111\073\106\001\002\000" +
    "\004\031\ufff4\001\002\000\004\046\u013f\001\002\000\004" +
    "\031\u010d\001\002\000\004\031\373\001\002\000\014\040" +
    "\251\046\277\047\247\054\243\060\244\001\002\000\020" +
    "\034\116\040\113\042\122\044\121\046\120\047\114\050" +
    "\123\001\002\000\004\030\274\001\002\000\004\030\272" +
    "\001\002\000\006\010\uffd9\074\uffd9\001\002\000\004\030" +
    "\234\001\002\000\006\010\227\074\230\001\002\000\004" +
    "\030\150\001\002\000\004\030\146\001\002\000\004\030" +
    "\144\001\002\000\004\030\124\001\002\000\026\005\022" +
    "\014\024\023\035\025\031\072\034\075\026\076\036\077" +
    "\126\101\025\102\021\001\002\000\006\010\uffd6\074\uffd6" +
    "\001\002\000\024\005\022\014\024\023\035\025\031\072" +
    "\034\075\026\076\036\101\025\102\021\001\002\000\032" +
    "\010\uffb5\013\051\031\uffb5\040\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\054\uffb5\060\uffb5\070\050\071\047\074\uffb5\001\002" +
    "\000\012\010\131\013\051\070\050\071\047\001\002\000" +
    "\024\005\022\014\024\023\035\025\031\072\034\075\026" +
    "\076\036\101\025\102\132\001\002\000\030\004\uffa3\005" +
    "\uffa3\006\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3\023\136" +
    "\070\uffa3\071\uffa3\100\uffa3\001\002\000\012\013\051\070" +
    "\050\071\047\100\uffb3\001\002\000\004\100\135\001\002" +
    "\000\024\010\uffb6\031\uffb6\040\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\054\uffb6\060\uffb6\074\uffb6\001\002\000\024\005\022" +
    "\014\024\023\035\025\031\072\034\075\026\076\036\101" +
    "\025\102\021\001\002\000\006\010\141\024\142\001\002" +
    "\000\014\010\uffb1\013\051\024\uffb1\070\050\071\047\001" +
    "\002\000\024\005\022\014\024\023\035\025\031\072\034" +
    "\075\026\076\036\101\025\102\021\001\002\000\004\100" +
    "\uffb4\001\002\000\014\010\uffb2\013\051\024\uffb2\070\050" +
    "\071\047\001\002\000\026\005\022\014\024\023\035\025" +
    "\031\072\034\075\026\076\036\077\126\101\025\102\021" +
    "\001\002\000\006\010\uffd3\074\uffd3\001\002\000\026\005" +
    "\022\014\024\023\035\025\031\072\034\075\026\076\036" +
    "\077\126\101\025\102\021\001\002\000\006\010\uffd4\074" +
    "\uffd4\001\002\000\026\005\022\014\152\023\035\025\031" +
    "\072\034\075\026\076\036\077\126\101\025\102\021\001" +
    "\002\000\006\010\uffd8\074\uffd8\001\002\000\032\004\uffa2" +
    "\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013" +
    "\uffa2\031\153\070\uffa2\071\uffa2\074\uffa2\001\002\000\004" +
    "\031\155\001\002\000\004\031\uffe1\001\002\000\016\040" +
    "\166\042\162\044\161\047\165\050\163\051\167\001\002" +
    "\000\004\031\160\001\002\000\004\031\uffe2\001\002\000" +
    "\020\040\166\042\162\044\161\045\164\047\165\050\163" +
    "\051\167\001\002\000\004\031\222\001\002\000\004\031" +
    "\215\001\002\000\004\031\210\001\002\000\004\074\207" +
    "\001\002\000\004\031\202\001\002\000\004\031\175\001" +
    "\002\000\004\031\170\001\002\000\026\005\022\014\024" +
    "\023\035\025\031\072\034\075\026\076\036\077\126\101" +
    "\025\102\021\001\002\000\004\031\172\001\002\000\004" +
    "\051\173\001\002\000\004\074\174\001\002\000\004\031" +
    "\uffdb\001\002\000\026\005\022\014\024\023\035\025\031" +
    "\072\034\075\026\076\036\077\126\101\025\102\021\001" +
    "\002\000\004\031\177\001\002\000\004\040\200\001\002" +
    "\000\004\074\201\001\002\000\004\031\uffde\001\002\000" +
    "\026\005\022\014\024\023\035\025\031\072\034\075\026" +
    "\076\036\077\126\101\025\102\021\001\002\000\004\031" +
    "\204\001\002\000\004\047\205\001\002\000\004\074\206" +
    "\001\002\000\004\031\uffe0\001\002\000\004\031\ufff1\001" +
    "\002\000\026\005\022\014\024\023\035\025\031\072\034" +
    "\075\026\076\036\077\126\101\025\102\021\001\002\000" +
    "\004\031\212\001\002\000\004\050\213\001\002\000\004" +
    "\074\214\001\002\000\004\031\uffdf\001\002\000\026\005" +
    "\022\014\024\023\035\025\031\072\034\075\026\076\036" +
    "\077\126\101\025\102\021\001\002\000\004\031\217\001" +
    "\002\000\004\042\220\001\002\000\004\074\221\001\002" +
    "\000\004\031\uffdc\001\002\000\026\005\022\014\024\023" +
    "\035\025\031\072\034\075\026\076\036\077\126\101\025" +
    "\102\021\001\002\000\004\031\224\001\002\000\004\044" +
    "\225\001\002\000\004\074\226\001\002\000\004\031\uffdd" +
    "\001\002\000\016\040\113\042\122\044\121\046\231\047" +
    "\114\050\123\001\002\000\004\031\ufff0\001\002\000\004" +
    "\030\233\001\002\000\006\010\uffda\074\uffda\001\002\000" +
    "\026\005\022\014\024\023\035\025\031\072\034\075\026" +
    "\076\036\077\126\101\025\102\021\001\002\000\026\005" +
    "\022\014\024\023\035\025\031\072\034\075\026\076\036" +
    "\077\126\101\025\102\021\001\002\000\004\031\236\001" +
    "\002\000\004\031\241\001\002\000\004\031\267\001\002" +
    "\000\004\031\uffc0\001\002\000\004\061\242\001\002\000" +
    "\014\040\251\046\250\047\247\054\243\060\244\001\002" +
    "\000\004\030\264\001\002\000\004\030\262\001\002\000" +
    "\016\040\251\046\250\047\247\054\243\060\244\074\260" +
    "\001\002\000\016\040\uffc7\046\uffc7\047\uffc7\054\uffc7\060" +
    "\uffc7\074\uffc7\001\002\000\004\030\256\001\002\000\004" +
    "\030\254\001\002\000\004\030\252\001\002\000\026\005" +
    "\022\014\024\023\035\025\031\072\034\075\026\076\036" +
    "\077\126\101\025\102\021\001\002\000\016\040\uffc3\046" +
    "\uffc3\047\uffc3\054\uffc3\060\uffc3\074\uffc3\001\002\000\026" +
    "\005\022\014\024\023\035\025\031\072\034\075\026\076" +
    "\036\077\126\101\025\102\021\001\002\000\016\040\uffc6" +
    "\046\uffc6\047\uffc6\054\uffc6\060\uffc6\074\uffc6\001\002\000" +
    "\026\005\022\014\024\023\035\025\031\072\034\075\026" +
    "\076\036\077\126\101\025\102\021\001\002\000\016\040" +
    "\uffc5\046\uffc5\047\uffc5\054\uffc5\060\uffc5\074\uffc5\001\002" +
    "\000\004\031\uffbf\001\002\000\016\040\uffc8\046\uffc8\047" +
    "\uffc8\054\uffc8\060\uffc8\074\uffc8\001\002\000\026\005\022" +
    "\014\024\023\035\025\031\072\034\075\026\076\036\077" +
    "\126\101\025\102\021\001\002\000\016\040\uffc4\046\uffc4" +
    "\047\uffc4\054\uffc4\060\uffc4\074\uffc4\001\002\000\026\005" +
    "\022\014\024\023\035\025\031\072\034\075\026\076\036" +
    "\077\126\101\025\102\021\001\002\000\016\040\uffc2\046" +
    "\uffc2\047\uffc2\054\uffc2\060\uffc2\074\uffc2\001\002\000\004" +
    "\031\uffc1\001\002\000\006\045\270\061\242\001\002\000" +
    "\004\074\271\001\002\000\004\031\uffed\001\002\000\026" +
    "\005\022\014\024\023\035\025\031\072\034\075\026\076" +
    "\036\077\126\101\025\102\021\001\002\000\006\010\uffd7" +
    "\074\uffd7\001\002\000\026\005\022\014\024\023\035\025" +
    "\031\072\034\075\026\076\036\077\126\101\025\102\021" +
    "\001\002\000\006\010\uffd5\074\uffd5\001\002\000\016\040" +
    "\251\046\250\047\247\054\243\060\244\074\372\001\002" +
    "\000\004\030\300\001\002\000\026\005\022\014\301\023" +
    "\035\025\031\072\034\075\026\076\036\077\126\101\025" +
    "\102\021\001\002\000\042\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\011\uffa2\012\uffa2\013\uffa2\031\302\040\uffa2\046\uffa2" +
    "\047\uffa2\054\uffa2\060\uffa2\070\uffa2\071\uffa2\074\uffa2\001" +
    "\002\000\004\031\304\001\002\000\004\031\366\001\002" +
    "\000\022\040\315\047\313\051\314\054\310\055\311\056" +
    "\306\057\307\060\312\001\002\000\004\031\uffd1\001\002" +
    "\000\004\031\361\001\002\000\004\031\354\001\002\000" +
    "\004\031\347\001\002\000\004\031\342\001\002\000\004" +
    "\031\335\001\002\000\004\031\330\001\002\000\004\031" +
    "\323\001\002\000\004\031\316\001\002\000\026\005\022" +
    "\014\024\023\035\025\031\072\034\075\026\076\036\077" +
    "\126\101\025\102\021\001\002\000\004\031\320\001\002" +
    "\000\004\040\321\001\002\000\004\074\322\001\002\000" +
    "\004\031\uffcf\001\002\000\026\005\022\014\024\023\035" +
    "\025\031\072\034\075\026\076\036\077\126\101\025\102" +
    "\021\001\002\000\004\031\325\001\002\000\004\051\326" +
    "\001\002\000\004\074\327\001\002\000\004\031\uffca\001" +
    "\002\000\026\005\022\014\024\023\035\025\031\072\034" +
    "\075\026\076\036\077\126\101\025\102\021\001\002\000" +
    "\004\031\332\001\002\000\004\047\333\001\002\000\004" +
    "\074\334\001\002\000\004\031\uffd0\001\002\000\026\005" +
    "\022\014\024\023\035\025\031\072\034\075\026\076\036" +
    "\077\126\101\025\102\021\001\002\000\004\031\337\001" +
    "\002\000\004\060\340\001\002\000\004\074\341\001\002" +
    "\000\004\031\uffc9\001\002\000\026\005\022\014\024\023" +
    "\035\025\031\072\034\075\026\076\036\077\126\101\025" +
    "\102\021\001\002\000\004\031\344\001\002\000\004\055" +
    "\345\001\002\000\004\074\346\001\002\000\004\031\uffcd" +
    "\001\002\000\026\005\022\014\024\023\035\025\031\072" +
    "\034\075\026\076\036\077\126\101\025\102\021\001\002" +
    "\000\004\031\351\001\002\000\004\054\352\001\002\000" +
    "\004\074\353\001\002\000\004\031\uffce\001\002\000\026" +
    "\005\022\014\024\023\035\025\031\072\034\075\026\076" +
    "\036\077\126\101\025\102\021\001\002\000\004\031\356" +
    "\001\002\000\004\057\357\001\002\000\004\074\360\001" +
    "\002\000\004\031\uffcb\001\002\000\026\005\022\014\024" +
    "\023\035\025\031\072\034\075\026\076\036\077\126\101" +
    "\025\102\021\001\002\000\004\031\363\001\002\000\004" +
    "\056\364\001\002\000\004\074\365\001\002\000\004\031" +
    "\uffcc\001\002\000\024\040\315\047\313\051\314\054\310" +
    "\055\311\056\306\057\307\060\312\061\370\001\002\000" +
    "\004\031\uffd2\001\002\000\004\074\371\001\002\000\004" +
    "\031\uffef\001\002\000\004\031\uffee\001\002\000\004\031" +
    "\374\001\002\000\004\034\375\001\002\000\004\031\376" +
    "\001\002\000\026\005\022\014\024\023\035\025\031\072" +
    "\034\075\026\076\036\077\126\101\025\102\021\001\002" +
    "\000\004\031\u0100\001\002\000\004\034\u0101\001\002\000" +
    "\004\074\u0102\001\002\000\004\031\u0103\001\002\000\004" +
    "\035\u0104\001\002\000\004\031\u0105\001\002\000\026\005" +
    "\022\014\024\023\035\025\031\072\034\075\026\076\036" +
    "\077\126\101\025\102\021\001\002\000\004\031\u0107\001" +
    "\002\000\004\035\u0108\001\002\000\004\074\u0109\001\002" +
    "\000\004\031\u010a\001\002\000\004\033\u010b\001\002\000" +
    "\004\074\u010c\001\002\000\004\031\ufff3\001\002\000\004" +
    "\031\u0110\001\002\000\004\031\u013c\001\002\000\004\031" +
    "\uffea\001\002\000\020\034\u0114\035\u0116\040\u0117\041\u0115" +
    "\042\u0112\043\u0113\044\u0111\001\002\000\004\031\u0136\001" +
    "\002\000\004\031\u0131\001\002\000\004\031\u012c\001\002" +
    "\000\004\031\u0127\001\002\000\004\031\u0122\001\002\000" +
    "\004\031\u011d\001\002\000\004\031\u0118\001\002\000\026" +
    "\005\022\014\024\023\035\025\031\072\034\075\026\076" +
    "\036\077\126\101\025\102\021\001\002\000\004\031\u011a" +
    "\001\002\000\004\040\u011b\001\002\000\004\074\u011c\001" +
    "\002\000\004\031\uffe8\001\002\000\026\005\022\014\024" +
    "\023\035\025\031\072\034\075\026\076\036\077\126\101" +
    "\025\102\021\001\002\000\004\031\u011f\001\002\000\004" +
    "\035\u0120\001\002\000\004\074\u0121\001\002\000\004\031" +
    "\uffe6\001\002\000\026\005\022\014\024\023\035\025\031" +
    "\072\034\075\026\076\036\077\126\101\025\102\021\001" +
    "\002\000\004\031\u0124\001\002\000\004\041\u0125\001\002" +
    "\000\004\074\u0126\001\002\000\004\031\uffe7\001\002\000" +
    "\026\005\022\014\024\023\035\025\031\072\034\075\026" +
    "\076\036\077\126\101\025\102\021\001\002\000\004\031" +
    "\u0129\001\002\000\004\034\u012a\001\002\000\004\074\u012b" +
    "\001\002\000\004\031\uffe9\001\002\000\026\005\022\014" +
    "\024\023\035\025\031\072\034\075\026\076\036\077\126" +
    "\101\025\102\021\001\002\000\004\031\u012e\001\002\000" +
    "\004\043\u012f\001\002\000\004\074\u0130\001\002\000\004" +
    "\031\uffe4\001\002\000\026\005\022\014\024\023\035\025" +
    "\031\072\034\075\026\076\036\077\126\101\025\102\021" +
    "\001\002\000\004\031\u0133\001\002\000\004\042\u0134\001" +
    "\002\000\004\074\u0135\001\002\000\004\031\uffe5\001\002" +
    "\000\026\005\022\014\024\023\035\025\031\072\034\075" +
    "\026\076\036\077\126\101\025\102\021\001\002\000\004" +
    "\031\u0138\001\002\000\004\044\u0139\001\002\000\004\074" +
    "\u013a\001\002\000\004\031\uffe3\001\002\000\004\031\uffeb" +
    "\001\002\000\022\034\u0114\035\u0116\037\u013d\040\u0117\041" +
    "\u0115\042\u0112\043\u0113\044\u0111\001\002\000\004\074\u013e" +
    "\001\002\000\004\031\ufff2\001\002\000\004\030\u0140\001" +
    "\002\000\026\005\022\014\024\023\035\025\031\072\034" +
    "\075\026\076\036\077\126\101\025\102\021\001\002\000" +
    "\004\050\u0142\001\002\000\004\030\u0143\001\002\000\026" +
    "\005\022\014\024\023\035\025\031\072\034\075\026\076" +
    "\036\077\126\101\025\102\021\001\002\000\004\074\u0145" +
    "\001\002\000\004\031\uffec\001\002\000\016\032\u0148\033" +
    "\110\037\107\045\112\061\111\073\106\001\002\000\004" +
    "\031\ufff5\001\002\000\004\074\u0149\001\002\000\006\002" +
    "\ufffd\031\ufffd\001\002\000\004\030\u014b\001\002\000\024" +
    "\005\022\014\024\023\035\025\031\072\034\075\026\076" +
    "\036\101\025\102\021\001\002\000\012\013\051\031\u014d" +
    "\070\050\071\047\001\002\000\006\063\u014e\102\u0150\001" +
    "\002\000\004\102\u015e\001\002\000\010\031\u015a\063\u014e" +
    "\102\u0150\001\002\000\004\023\u0152\001\002\000\010\031" +
    "\ufffa\063\ufffa\102\ufffa\001\002\000\024\005\022\014\024" +
    "\023\035\025\031\072\034\075\026\076\036\101\025\102" +
    "\021\001\002\000\006\010\141\024\u0154\001\002\000\004" +
    "\030\u0155\001\002\000\004\025\u0156\001\002\000\024\005" +
    "\022\014\024\023\035\025\031\072\034\075\026\076\036" +
    "\101\025\102\021\001\002\000\012\013\051\026\u0158\070" +
    "\050\071\047\001\002\000\004\017\u0159\001\002\000\010" +
    "\031\ufff8\063\ufff8\102\ufff8\001\002\000\004\062\u015c\001" +
    "\002\000\010\031\ufffb\063\ufffb\102\ufffb\001\002\000\004" +
    "\074\u015d\001\002\000\006\002\ufffe\031\ufffe\001\002\000" +
    "\004\030\u015f\001\002\000\024\005\022\014\024\023\035" +
    "\025\031\072\034\075\026\076\036\101\025\102\021\001" +
    "\002\000\012\013\051\017\u0161\070\050\071\047\001\002" +
    "\000\010\031\ufff9\063\ufff9\102\ufff9\001\002\000\004\002" +
    "\001\001\002\000\006\002\000\031\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\006\002\003\035\005\001\001\000\004\035" +
    "\u0162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\027\004\026\005\022\006\031\007\032\010\036\001\001" +
    "\000\002\001\001\000\010\004\100\005\022\006\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\027\004\026\005\022\006\031\007\067\010\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\056\004\026\005\022\006\031\001\001\000\016\003\027" +
    "\004\026\005\022\006\031\007\054\010\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\042\004\026" +
    "\005\022\006\031\001\001\000\012\003\041\004\026\005" +
    "\022\006\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\027\004\026\005\022\006\031\007\044\010" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\027\004\026\005\022\006\031\010\053\001\001\000" +
    "\014\003\027\004\026\005\022\006\031\010\052\001\001" +
    "\000\014\003\027\004\026\005\022\006\031\010\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\027\004\026\005\022\006\031\007\061\010\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\066\006\031\001\001\000\006\005\065" +
    "\006\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\027\004\026" +
    "\005\022\006\031\007\072\010\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\077\005\022\006\031" +
    "\001\001\000\010\004\076\005\022\006\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\102\027\104\001\001\000\004\027\u0146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\275\025\245\001" +
    "\001\000\006\015\116\023\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\027\004\026\005" +
    "\022\006\031\007\126\010\036\030\124\001\001\000\002" +
    "\001\001\000\016\003\027\004\026\005\022\006\031\007" +
    "\127\010\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\027\004\026\005\022\006\031\007\132\010" +
    "\036\031\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\027\004" +
    "\026\005\022\006\031\007\137\010\036\032\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\027\004" +
    "\026\005\022\006\031\007\142\010\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\027\004\026\005" +
    "\022\006\031\007\126\010\036\030\144\001\001\000\002" +
    "\001\001\000\020\003\027\004\026\005\022\006\031\007" +
    "\126\010\036\030\146\001\001\000\002\001\001\000\020" +
    "\003\027\004\026\005\022\006\031\007\126\010\036\030" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\155\022\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\027\004\026\005\022\006" +
    "\031\007\126\010\036\030\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\027\004\026\005\022\006\031\007\126\010\036" +
    "\030\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\027\004\026" +
    "\005\022\006\031\007\126\010\036\030\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\027\004\026\005" +
    "\022\006\031\007\126\010\036\030\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\027\004\026\005\022\006\031\007\126" +
    "\010\036\030\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\027" +
    "\004\026\005\022\006\031\007\126\010\036\030\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\027" +
    "\004\026\005\022\006\031\007\126\010\036\030\150\001" +
    "\001\000\020\003\027\004\026\005\022\006\031\007\126" +
    "\010\036\030\234\001\001\000\002\001\001\000\006\020" +
    "\236\026\237\001\001\000\004\026\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\244\025\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\027\004\026\005\022" +
    "\006\031\007\126\010\036\030\252\001\001\000\002\001" +
    "\001\000\020\003\027\004\026\005\022\006\031\007\126" +
    "\010\036\030\254\001\001\000\002\001\001\000\020\003" +
    "\027\004\026\005\022\006\031\007\126\010\036\030\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\027\004\026\005\022\006\031\007\126" +
    "\010\036\030\262\001\001\000\002\001\001\000\020\003" +
    "\027\004\026\005\022\006\031\007\126\010\036\030\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\027" +
    "\004\026\005\022\006\031\007\126\010\036\030\272\001" +
    "\001\000\002\001\001\000\020\003\027\004\026\005\022" +
    "\006\031\007\126\010\036\030\274\001\001\000\002\001" +
    "\001\000\004\025\260\001\001\000\002\001\001\000\020" +
    "\003\027\004\026\005\022\006\031\007\126\010\036\030" +
    "\254\001\001\000\002\001\001\000\006\016\302\024\304" +
    "\001\001\000\004\024\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\027" +
    "\004\026\005\022\006\031\007\126\010\036\030\316\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\027\004\026\005\022\006" +
    "\031\007\126\010\036\030\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\027\004\026\005\022\006\031\007\126\010\036" +
    "\030\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\027\004\026" +
    "\005\022\006\031\007\126\010\036\030\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\027\004\026\005\022\006\031\007" +
    "\126\010\036\030\342\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\027\004\026\005\022\006\031\007\126\010\036\030\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\027\004\026\005\022" +
    "\006\031\007\126\010\036\030\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\027\004\026\005\022\006\031\007\126\010" +
    "\036\030\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\027\004\026\005\022\006\031\007\126" +
    "\010\036\030\376\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\027\004\026\005\022\006" +
    "\031\007\126\010\036\030\u0105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\u010d\021\u010e\001\001\000\004\021\u013a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\027" +
    "\004\026\005\022\006\031\007\126\010\036\030\u0118\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\027\004\026\005\022\006" +
    "\031\007\126\010\036\030\u011d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\027\004\026\005\022\006\031\007\126\010\036" +
    "\030\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\027\004\026" +
    "\005\022\006\031\007\126\010\036\030\u0127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\027\004\026\005\022\006\031\007" +
    "\126\010\036\030\u012c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\027\004\026\005\022\006\031\007\126\010\036\030\u0131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\027\004\026\005\022" +
    "\006\031\007\126\010\036\030\u0136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\027\004\026" +
    "\005\022\006\031\007\126\010\036\030\u0140\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\027\004\026" +
    "\005\022\006\031\007\126\010\036\030\u0143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\027\004\026\005\022\006\031\007\u014b" +
    "\010\036\001\001\000\002\001\001\000\006\033\u014e\034" +
    "\u0150\001\001\000\002\001\001\000\004\034\u015a\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\027\004" +
    "\026\005\022\006\031\007\137\010\036\032\u0152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\027\004\026\005\022\006\031\007\u0156\010\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\027\004" +
    "\026\005\022\006\031\007\u015f\010\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintacticoS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintacticoS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintacticoS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
     public String salida="";
    public ArrayList<String> getDatosFigura(){
    return action_obj.gman;
    }
    public int tam1, tam2;
    public LinkedList tab = new LinkedList();
  //  static LinkedList<Element> gmansimb = new LinkedList();
    public boolean err=false;
    public String resultado="";

    public void syntax_error(Symbol s){
    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
            err=true;
            System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
       tab.add(s.right+1);
       tab.add(s.left);
       tab.add(s.value);
        }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
            err=true;
            System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
    }


    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ASintacticoS$actions {


    ArrayList<String> gman = new ArrayList();
    

    //METODOS Y VARIABLES QUE SOLO PUEDEN SER ACCEDIDAS DENTRO DEL PARSER
    int exponente(int exp){
    int resultado= 1;
    for(int i=1; i<exp; i++){
    resultado = resultado *2;
    }
    return resultado;
    }
    
  private final ASintacticoS parser;

  /** Constructor */
  CUP$ASintacticoS$actions(ASintacticoS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ASintacticoS$do_action(
    int                        CUP$ASintacticoS$act_num,
    java_cup.runtime.lr_parser CUP$ASintacticoS$parser,
    java.util.Stack            CUP$ASintacticoS$stack,
    int                        CUP$ASintacticoS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintacticoS$result;

      /* select the action based on the action number */
      switch (CUP$ASintacticoS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= CADS 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= id 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= num 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= MENOS expresion 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= LLAVEA logica LLAVEC 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= RQ PARA logica PARC 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= PT PARA logica PARC 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= PARA logica PARC 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino ::= factor 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("termino",3, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino ::= factor DIV termino 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("termino",3, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino ::= factor POR termino 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("termino",3, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= termino 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= termino MENOS expresion 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= termino MAS expresion 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // in ::= expresion 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("in",1, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // paramet ::= logica 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("paramet",24, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // paramet ::= paramet COMA logica 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("paramet",24, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // llam ::= logica 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("llam",23, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // llam ::= id PARA paramet PARC 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("llam",23, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // llamada ::= logica 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("llamada",22, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // llamada ::= ABREC logica COMA llam CIERRAC 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("llamada",22, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-4)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rel ::= in 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("rel",6, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rel ::= rel MYR in 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("rel",6, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // rel ::= rel MNR in 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("rel",6, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // rel ::= NOT in 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("rel",6, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logica ::= rel 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("logica",5, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logica ::= logica AND rel 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("logica",5, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logica ::= logica XOR rel 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("logica",5, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // logica ::= logica OR rel 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("logica",5, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // l6 ::= D PROD list5 MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l6",20, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list6 ::= l6 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list6",14, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // list6 ::= list6 l6 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list6",14, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // l5 ::= CANT IGUAL llamada 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l5",19, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // l5 ::= NOM IGUAL llamada 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l5",19, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // l5 ::= SUCURSAL IGUAL llamada 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l5",19, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // l5 ::= COD IGUAL llamada 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l5",19, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // l5 ::= TIPO IGUAL llamada 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l5",19, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // list5 ::= l5 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list5",13, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list5 ::= list5 l5 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list5",13, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // l4 ::= D SUCURSAL D llamada D SUCURSAL MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // l4 ::= D IMG D llamada D IMG MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // l4 ::= D TAM D llamada D TAM MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // l4 ::= D COLOR D llamada D COLOR MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // l4 ::= D MARCA D llamada D MARCA MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // l4 ::= D CANT D llamada D CANT MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // l4 ::= D NOM D llamada D NOM MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // l4 ::= D COD D llamada D COD MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list4 ::= l4 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list4",12, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list4 ::= list4 l4 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list4",12, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // l3 ::= TEL IGUAL llamada 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // l3 ::= DIR IGUAL llamada 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // l3 ::= NOM IGUAL llamada 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // l3 ::= PROP IGUAL llamada 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // l3 ::= COD IGUAL llamada 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // l3 ::= TIPO IGUAL llamada 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // list3 ::= l3 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list3",11, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // list3 ::= list3 COMA l3 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list3",11, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // l2 ::= D IMG D llamada D IMG MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // l2 ::= D TEL D llamada D TEL MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // l2 ::= D DIR D llamada D DIR MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // l2 ::= D NOM D llamada D NOM MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // l2 ::= D PROP D llamada D PROP MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // l2 ::= D COD D llamada D COD MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // list2 ::= l2 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list2",10, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list2 ::= list2 l2 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list2",10, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // l1 ::= D DIR D llamada D DIR MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // l1 ::= D EM D llamada D EM MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // l1 ::= D TEL D llamada D TEL MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // l1 ::= D P D llamada D P MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // l1 ::= D APE D llamada D APE MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // l1 ::= D NOM D llamada D NOM MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // l1 ::= D IDE D llamada D IDE MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list1 ::= l1 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list1",9, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list1 ::= list1 l1 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list1",9, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c ::= D GET TIPO IGUAL llamada PROP IGUAL llamada MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",21, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-8)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c ::= D TIENDA IDE IGUAL llamada D list6 D TIENDA MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",21, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-9)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // c ::= D PROD list5 MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",21, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // c ::= D PROD TIPO IGUAL CADS D list4 D PROD MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",21, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-9)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // c ::= D TIENDA list3 MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",21, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // c ::= D TIENDA TIPO IGUAL CADS D list2 D TIENDA MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",21, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-9)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // c ::= D CU D list1 D CU MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",21, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // c ::= D IU D D IDE D llamada D IDE MD D P D llamada D P MD D IU MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",21, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-19)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= c 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= cuerpo c 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= EXTRAER DE logica DONDE logica PUNTOC 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= EXTRAER DE logica PUNTOC 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec ::= id PARA paramet PARC IGUAL LLAVEA logica LLAVEC PUNTOC 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("dec",26, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-8)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec ::= CONS id IGUAL logica PUNTOC 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("dec",26, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-4)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declara ::= dec 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("declara",25, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declara ::= declara dec 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("declara",25, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pro ::= D QUERY D exp D QUERY MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("pro",27, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pro ::= D R D cuerpo D R MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("pro",27, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pro ::= D MATE NOM IGUAL logica D declara D MATE MD 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("pro",27, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-9)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= pro 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= programa pro 
            {
              String RESULT =null;

              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = start_val;
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintacticoS$parser.done_parsing();
          return CUP$ASintacticoS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

