
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 02 20:06:50 CST 2016
//----------------------------------------------------

package analizadores;

import java.io.*;
import Arbol.*;
import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import java.util.Hashtable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 02 20:06:50 CST 2016
  */
public class ASintacticoS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ASintacticoS() {super();}

  /** Constructor which sets the default scanner. */
  public ASintacticoS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintacticoS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\040\003\000\002\002" +
    "\004\000\002\002\003\000\002\036\014\000\002\036\011" +
    "\000\002\036\011\000\002\034\004\000\002\034\003\000" +
    "\002\035\007\000\002\035\013\000\002\037\006\000\002" +
    "\037\010\000\002\011\004\000\002\011\003\000\002\030" +
    "\026\000\002\030\011\000\002\030\014\000\002\030\006" +
    "\000\002\030\014\000\002\030\006\000\002\030\014\000" +
    "\002\030\013\000\002\012\004\000\002\012\003\000\002" +
    "\021\011\000\002\021\011\000\002\021\011\000\002\021" +
    "\011\000\002\021\011\000\002\021\011\000\002\021\011" +
    "\000\002\013\004\000\002\013\003\000\002\022\011\000" +
    "\002\022\011\000\002\022\011\000\002\022\011\000\002" +
    "\022\011\000\002\022\011\000\002\014\005\000\002\014" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\015\004\000\002\015\003\000\002\024\011\000\002" +
    "\024\011\000\002\024\011\000\002\024\011\000\002\024" +
    "\011\000\002\024\011\000\002\024\011\000\002\024\011" +
    "\000\002\016\004\000\002\016\003\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\017\004\000\002\017\003\000\002\026" +
    "\006\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\010\004\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\031\007\000\002" +
    "\031\003\000\002\032\006\000\002\032\003\000\002\033" +
    "\005\000\002\033\003\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\003\000\002\006\005\000\002" +
    "\006\006\000\002\006\006\000\002\006\005\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\004\030\006\001\002\000\006\002\000\030" +
    "\006\001\002\000\004\002\u0163\001\002\000\010\031\011" +
    "\061\010\065\012\001\002\000\006\002\ufffe\030\ufffe\001" +
    "\002\000\004\037\u014b\001\002\000\004\030\103\001\002" +
    "\000\004\030\013\001\002\000\004\063\014\001\002\000" +
    "\004\064\021\001\002\000\004\030\016\001\002\000\004" +
    "\065\017\001\002\000\004\073\020\001\002\000\006\002" +
    "\ufffb\030\ufffb\001\002\000\024\005\023\022\036\024\032" +
    "\071\035\074\027\075\037\100\026\101\022\102\025\001" +
    "\002\000\060\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\016\uffa2\023\uffa2\025\uffa2\030" +
    "\uffa2\037\uffa2\045\uffa2\046\uffa2\047\uffa2\053\uffa2\057\uffa2" +
    "\066\uffa2\067\uffa2\070\uffa2\073\uffa2\077\uffa2\001\002\000" +
    "\022\005\023\022\036\024\032\074\027\075\037\100\026" +
    "\101\022\102\025\001\002\000\060\004\076\005\077\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\016\uffac" +
    "\023\uffac\025\uffac\030\uffac\037\uffac\045\uffac\046\uffac\047" +
    "\uffac\053\uffac\057\uffac\066\uffac\067\uffac\070\uffac\073\uffac" +
    "\077\uffac\001\002\000\060\004\uffa1\005\uffa1\006\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\016\uffa1\023\uffa1" +
    "\025\uffa1\030\uffa1\037\uffa1\045\uffa1\046\uffa1\047\uffa1\053" +
    "\uffa1\057\uffa1\066\uffa1\067\uffa1\070\uffa1\073\uffa1\077\uffa1" +
    "\001\002\000\060\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\016\uffa3\023\uffa3\025\uffa3" +
    "\030\uffa3\037\uffa3\045\uffa3\046\uffa3\047\uffa3\053\uffa3\057" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\073\uffa3\077\uffa3\001\002" +
    "\000\004\022\073\001\002\000\050\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\016\uffaf\023\uffaf\025\uffaf\030\uffaf\037\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\053\uffaf\057\uffaf\066\uffaf\067" +
    "\uffaf\070\uffaf\073\uffaf\077\uffaf\001\002\000\060\004\uffa9" +
    "\005\uffa9\006\070\007\067\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\016\uffa9\023\uffa9\025\uffa9\030\uffa9\037\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\053\uffa9\057\uffa9\066\uffa9\067\uffa9\070" +
    "\uffa9\073\uffa9\077\uffa9\001\002\000\024\005\023\022\036" +
    "\024\032\071\035\074\027\075\037\100\026\101\022\102" +
    "\025\001\002\000\050\010\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\016\uffb6\023\uffb6\025\uffb6\030\uffb6\037\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\053\uffb6\057\uffb6\066\uffb6\067\uffb6\070\uffb6" +
    "\073\uffb6\077\uffb6\001\002\000\014\013\051\016\062\066" +
    "\061\067\052\070\050\001\002\000\022\005\023\022\036" +
    "\024\032\074\027\075\037\100\026\101\022\102\025\001" +
    "\002\000\024\005\023\022\036\024\032\071\035\074\027" +
    "\075\037\100\026\101\022\102\025\001\002\000\004\022" +
    "\045\001\002\000\050\010\uffba\011\042\012\041\013\uffba" +
    "\016\uffba\023\uffba\025\uffba\030\uffba\037\uffba\045\uffba\046" +
    "\uffba\047\uffba\053\uffba\057\uffba\066\uffba\067\uffba\070\uffba" +
    "\073\uffba\077\uffba\001\002\000\022\005\023\022\036\024" +
    "\032\074\027\075\037\100\026\101\022\102\025\001\002" +
    "\000\022\005\023\022\036\024\032\074\027\075\037\100" +
    "\026\101\022\102\025\001\002\000\050\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\016\uffb8\023\uffb8\025\uffb8\030\uffb8\037" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\053\uffb8\057\uffb8\066\uffb8" +
    "\067\uffb8\070\uffb8\073\uffb8\077\uffb8\001\002\000\050\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\016\uffb7\023\uffb7\025\uffb7" +
    "\030\uffb7\037\uffb7\045\uffb7\046\uffb7\047\uffb7\053\uffb7\057" +
    "\uffb7\066\uffb7\067\uffb7\070\uffb7\073\uffb7\077\uffb7\001\002" +
    "\000\024\005\023\022\036\024\032\071\035\074\027\075" +
    "\037\100\026\101\022\102\025\001\002\000\012\013\051" +
    "\023\047\067\052\070\050\001\002\000\060\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\016\uffa6\023\uffa6\025\uffa6\030\uffa6\037\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\053\uffa6\057\uffa6\066\uffa6\067\uffa6\070\uffa6" +
    "\073\uffa6\077\uffa6\001\002\000\024\005\023\022\036\024" +
    "\032\071\035\074\027\075\037\100\026\101\022\102\025" +
    "\001\002\000\024\005\023\022\036\024\032\071\035\074" +
    "\027\075\037\100\026\101\022\102\025\001\002\000\024" +
    "\005\023\022\036\024\032\071\035\074\027\075\037\100" +
    "\026\101\022\102\025\001\002\000\050\010\uffbd\011\042" +
    "\012\041\013\uffbd\016\uffbd\023\uffbd\025\uffbd\030\uffbd\037" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\053\uffbd\057\uffbd\066\uffbd" +
    "\067\uffbd\070\uffbd\073\uffbd\077\uffbd\001\002\000\050\010" +
    "\uffbc\011\042\012\041\013\uffbc\016\uffbc\023\uffbc\025\uffbc" +
    "\030\uffbc\037\uffbc\045\uffbc\046\uffbc\047\uffbc\053\uffbc\057" +
    "\uffbc\066\uffbc\067\uffbc\070\uffbc\073\uffbc\077\uffbc\001\002" +
    "\000\050\010\uffbb\011\042\012\041\013\uffbb\016\uffbb\023" +
    "\uffbb\025\uffbb\030\uffbb\037\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\053\uffbb\057\uffbb\066\uffbb\067\uffbb\070\uffbb\073\uffbb\077" +
    "\uffbb\001\002\000\012\013\051\023\057\067\052\070\050" +
    "\001\002\000\060\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\016\uffa8\023\uffa8\025\uffa8" +
    "\030\uffa8\037\uffa8\045\uffa8\046\uffa8\047\uffa8\053\uffa8\057" +
    "\uffa8\066\uffa8\067\uffa8\070\uffa8\073\uffa8\077\uffa8\001\002" +
    "\000\050\010\uffb9\011\uffb9\012\uffb9\013\uffb9\016\uffb9\023" +
    "\uffb9\025\uffb9\030\uffb9\037\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\053\uffb9\057\uffb9\066\uffb9\067\uffb9\070\uffb9\073\uffb9\077" +
    "\uffb9\001\002\000\024\005\023\022\036\024\032\071\035" +
    "\074\027\075\037\100\026\101\022\102\025\001\002\000" +
    "\004\030\ufff6\001\002\000\012\013\051\016\064\067\052" +
    "\070\050\001\002\000\004\030\ufff5\001\002\000\012\013" +
    "\051\025\066\067\052\070\050\001\002\000\060\004\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\016\uffa5\023\uffa5\025\uffa5\030\uffa5\037\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\053\uffa5\057\uffa5\066\uffa5\067\uffa5\070" +
    "\uffa5\073\uffa5\077\uffa5\001\002\000\022\005\023\022\036" +
    "\024\032\074\027\075\037\100\026\101\022\102\025\001" +
    "\002\000\022\005\023\022\036\024\032\074\027\075\037" +
    "\100\026\101\022\102\025\001\002\000\060\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\016\uffab\023\uffab\025\uffab\030\uffab\037\uffab\045\uffab\046" +
    "\uffab\047\uffab\053\uffab\057\uffab\066\uffab\067\uffab\070\uffab" +
    "\073\uffab\077\uffab\001\002\000\060\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\016\uffaa" +
    "\023\uffaa\025\uffaa\030\uffaa\037\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\053\uffaa\057\uffaa\066\uffaa\067\uffaa\070\uffaa\073\uffaa" +
    "\077\uffaa\001\002\000\024\005\023\022\036\024\032\071" +
    "\035\074\027\075\037\100\026\101\022\102\025\001\002" +
    "\000\012\013\051\023\075\067\052\070\050\001\002\000" +
    "\060\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\016\uffa7\023\uffa7\025\uffa7\030\uffa7\037" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\053\uffa7\057\uffa7\066\uffa7" +
    "\067\uffa7\070\uffa7\073\uffa7\077\uffa7\001\002\000\022\005" +
    "\023\022\036\024\032\074\027\075\037\100\026\101\022" +
    "\102\025\001\002\000\022\005\023\022\036\024\032\074" +
    "\027\075\037\100\026\101\022\102\025\001\002\000\060" +
    "\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\016\uffad\023\uffad\025\uffad\030\uffad\037\uffad" +
    "\045\uffad\046\uffad\047\uffad\053\uffad\057\uffad\066\uffad\067" +
    "\uffad\070\uffad\073\uffad\077\uffad\001\002\000\060\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\016\uffae\023\uffae\025\uffae\030\uffae\037\uffae\045\uffae" +
    "\046\uffae\047\uffae\053\uffae\057\uffae\066\uffae\067\uffae\070" +
    "\uffae\073\uffae\077\uffae\001\002\000\060\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\016" +
    "\uffa4\023\uffa4\025\uffa4\030\uffa4\037\uffa4\045\uffa4\046\uffa4" +
    "\047\uffa4\053\uffa4\057\uffa4\066\uffa4\067\uffa4\070\uffa4\073" +
    "\uffa4\077\uffa4\001\002\000\004\030\105\001\002\000\004" +
    "\030\u0147\001\002\000\014\032\112\036\110\044\113\060" +
    "\111\072\107\001\002\000\004\030\ufff3\001\002\000\004" +
    "\045\u0140\001\002\000\004\030\u010e\001\002\000\014\037" +
    "\236\045\322\046\233\053\230\057\232\001\002\000\004" +
    "\030\277\001\002\000\020\033\117\037\114\041\123\043" +
    "\122\045\121\046\115\047\124\001\002\000\004\027\275" +
    "\001\002\000\004\027\273\001\002\000\006\010\uffd8\073" +
    "\uffd8\001\002\000\004\027\217\001\002\000\006\010\211" +
    "\073\212\001\002\000\004\027\133\001\002\000\004\027" +
    "\131\001\002\000\004\027\127\001\002\000\004\027\125" +
    "\001\002\000\004\100\126\001\002\000\006\010\uffd5\073" +
    "\uffd5\001\002\000\004\100\130\001\002\000\006\010\uffd2" +
    "\073\uffd2\001\002\000\004\102\132\001\002\000\006\010" +
    "\uffd3\073\uffd3\001\002\000\004\102\134\001\002\000\010" +
    "\010\uffd7\030\135\073\uffd7\001\002\000\004\030\137\001" +
    "\002\000\004\030\uffe0\001\002\000\016\037\150\041\144" +
    "\043\143\046\147\047\145\050\151\001\002\000\004\030" +
    "\142\001\002\000\004\030\uffe1\001\002\000\020\037\150" +
    "\041\144\043\143\044\146\046\147\047\145\050\151\001" +
    "\002\000\004\030\204\001\002\000\004\030\177\001\002" +
    "\000\004\030\172\001\002\000\004\073\171\001\002\000" +
    "\004\030\164\001\002\000\004\030\157\001\002\000\004" +
    "\030\152\001\002\000\004\102\153\001\002\000\004\030" +
    "\154\001\002\000\004\050\155\001\002\000\004\073\156" +
    "\001\002\000\004\030\uffda\001\002\000\004\102\160\001" +
    "\002\000\004\030\161\001\002\000\004\037\162\001\002" +
    "\000\004\073\163\001\002\000\004\030\uffdd\001\002\000" +
    "\004\100\165\001\002\000\004\030\166\001\002\000\004" +
    "\046\167\001\002\000\004\073\170\001\002\000\004\030" +
    "\uffdf\001\002\000\004\030\ufff0\001\002\000\004\100\173" +
    "\001\002\000\004\030\174\001\002\000\004\047\175\001" +
    "\002\000\004\073\176\001\002\000\004\030\uffde\001\002" +
    "\000\004\100\200\001\002\000\004\030\201\001\002\000" +
    "\004\041\202\001\002\000\004\073\203\001\002\000\004" +
    "\030\uffdb\001\002\000\004\102\205\001\002\000\004\030" +
    "\206\001\002\000\004\043\207\001\002\000\004\073\210" +
    "\001\002\000\004\030\uffdc\001\002\000\016\037\114\041" +
    "\123\043\122\045\213\046\115\047\124\001\002\000\004" +
    "\030\uffef\001\002\000\004\027\215\001\002\000\006\010" +
    "\uffd9\073\uffd9\001\002\000\004\102\216\001\002\000\006" +
    "\010\uffd7\073\uffd7\001\002\000\026\005\023\022\036\024" +
    "\032\071\035\074\027\075\037\076\220\100\026\101\022" +
    "\102\025\001\002\000\024\005\023\022\036\024\032\071" +
    "\035\074\027\075\037\100\026\101\022\102\025\001\002" +
    "\000\004\030\223\001\002\000\030\013\051\030\uffb4\037" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\053\uffb4\057\uffb4\067\052" +
    "\070\050\073\uffb4\001\002\000\004\030\226\001\002\000" +
    "\004\030\254\001\002\000\004\030\uffbf\001\002\000\004" +
    "\060\227\001\002\000\014\037\236\045\235\046\233\053" +
    "\230\057\232\001\002\000\004\027\251\001\002\000\016" +
    "\037\236\045\235\046\233\053\230\057\232\073\250\001" +
    "\002\000\004\027\245\001\002\000\004\027\243\001\002" +
    "\000\016\037\uffc6\045\uffc6\046\uffc6\053\uffc6\057\uffc6\073" +
    "\uffc6\001\002\000\004\027\241\001\002\000\004\027\237" +
    "\001\002\000\004\102\240\001\002\000\016\037\uffc2\045" +
    "\uffc2\046\uffc2\053\uffc2\057\uffc2\073\uffc2\001\002\000\004" +
    "\102\242\001\002\000\016\037\uffc5\045\uffc5\046\uffc5\053" +
    "\uffc5\057\uffc5\073\uffc5\001\002\000\004\100\244\001\002" +
    "\000\016\037\uffc4\045\uffc4\046\uffc4\053\uffc4\057\uffc4\073" +
    "\uffc4\001\002\000\004\100\246\001\002\000\016\037\uffc3" +
    "\045\uffc3\046\uffc3\053\uffc3\057\uffc3\073\uffc3\001\002\000" +
    "\016\037\uffc7\045\uffc7\046\uffc7\053\uffc7\057\uffc7\073\uffc7" +
    "\001\002\000\004\030\uffbe\001\002\000\026\005\023\022" +
    "\036\024\032\071\035\074\027\075\037\076\220\100\026" +
    "\101\022\102\025\001\002\000\016\037\uffc1\045\uffc1\046" +
    "\uffc1\053\uffc1\057\uffc1\073\uffc1\001\002\000\004\030\uffc0" +
    "\001\002\000\006\044\255\060\227\001\002\000\004\073" +
    "\256\001\002\000\004\030\uffec\001\002\000\012\010\260" +
    "\013\051\067\052\070\050\001\002\000\024\005\023\022" +
    "\036\024\032\071\035\074\027\075\037\100\026\101\261" +
    "\102\025\001\002\000\030\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\011\uffa2\012\uffa2\013\uffa2\022\265\067\uffa2\070\uffa2" +
    "\077\uffa2\001\002\000\012\013\051\067\052\070\050\077" +
    "\uffb2\001\002\000\004\077\264\001\002\000\022\030\uffb5" +
    "\037\uffb5\045\uffb5\046\uffb5\047\uffb5\053\uffb5\057\uffb5\073" +
    "\uffb5\001\002\000\004\101\266\001\002\000\006\010\uffb0" +
    "\023\uffb0\001\002\000\006\010\270\023\271\001\002\000" +
    "\004\101\272\001\002\000\004\077\uffb3\001\002\000\006" +
    "\010\uffb1\023\uffb1\001\002\000\004\100\274\001\002\000" +
    "\006\010\uffd6\073\uffd6\001\002\000\004\102\276\001\002" +
    "\000\006\010\uffd4\073\uffd4\001\002\000\004\030\300\001" +
    "\002\000\004\033\301\001\002\000\004\030\302\001\002" +
    "\000\004\100\303\001\002\000\004\030\304\001\002\000" +
    "\004\033\305\001\002\000\004\073\306\001\002\000\004" +
    "\030\307\001\002\000\004\034\310\001\002\000\004\030" +
    "\311\001\002\000\004\101\312\001\002\000\004\030\313" +
    "\001\002\000\004\034\314\001\002\000\004\073\315\001" +
    "\002\000\004\030\316\001\002\000\004\032\317\001\002" +
    "\000\004\073\320\001\002\000\004\030\ufff2\001\002\000" +
    "\016\037\236\045\235\046\233\053\230\057\232\073\u010d" +
    "\001\002\000\004\027\323\001\002\000\004\102\324\001" +
    "\002\000\020\030\325\037\uffc5\045\uffc5\046\uffc5\053\uffc5" +
    "\057\uffc5\073\uffc5\001\002\000\004\030\326\001\002\000" +
    "\022\037\336\046\337\050\343\053\342\054\333\055\334" +
    "\056\340\057\335\001\002\000\004\030\331\001\002\000" +
    "\004\030\uffd0\001\002\000\024\037\336\046\337\050\343" +
    "\053\342\054\333\055\334\056\340\057\335\060\341\001" +
    "\002\000\004\030\uffd1\001\002\000\004\030\u0108\001\002" +
    "\000\004\030\u0103\001\002\000\004\030\376\001\002\000" +
    "\004\030\371\001\002\000\004\030\364\001\002\000\004" +
    "\030\357\001\002\000\004\073\356\001\002\000\004\030" +
    "\351\001\002\000\004\030\344\001\002\000\004\102\345" +
    "\001\002\000\004\030\346\001\002\000\004\050\347\001" +
    "\002\000\004\073\350\001\002\000\004\030\uffc9\001\002" +
    "\000\026\005\023\022\036\024\032\071\035\074\027\075" +
    "\037\076\220\100\026\101\022\102\025\001\002\000\004" +
    "\030\353\001\002\000\004\053\354\001\002\000\004\073" +
    "\355\001\002\000\004\030\uffcd\001\002\000\004\030\uffee" +
    "\001\002\000\026\005\023\022\036\024\032\071\035\074" +
    "\027\075\037\076\220\100\026\101\022\102\025\001\002" +
    "\000\004\030\361\001\002\000\004\056\362\001\002\000" +
    "\004\073\363\001\002\000\004\030\uffca\001\002\000\004" +
    "\100\365\001\002\000\004\030\366\001\002\000\004\046" +
    "\367\001\002\000\004\073\370\001\002\000\004\030\uffcf" +
    "\001\002\000\004\102\372\001\002\000\004\030\373\001" +
    "\002\000\004\037\374\001\002\000\004\073\375\001\002" +
    "\000\004\030\uffce\001\002\000\004\100\377\001\002\000" +
    "\004\030\u0100\001\002\000\004\057\u0101\001\002\000\004" +
    "\073\u0102\001\002\000\004\030\uffc8\001\002\000\004\102" +
    "\u0104\001\002\000\004\030\u0105\001\002\000\004\055\u0106" +
    "\001\002\000\004\073\u0107\001\002\000\004\030\uffcb\001" +
    "\002\000\004\102\u0109\001\002\000\004\030\u010a\001\002" +
    "\000\004\054\u010b\001\002\000\004\073\u010c\001\002\000" +
    "\004\030\uffcc\001\002\000\004\030\uffed\001\002\000\004" +
    "\030\u0111\001\002\000\004\030\u013d\001\002\000\004\030" +
    "\uffe9\001\002\000\020\033\u0115\034\u0117\037\u0118\040\u0116" +
    "\041\u0113\042\u0114\043\u0112\001\002\000\004\030\u0137\001" +
    "\002\000\004\030\u0132\001\002\000\004\030\u012d\001\002" +
    "\000\004\030\u0128\001\002\000\004\030\u0123\001\002\000" +
    "\004\030\u011e\001\002\000\004\030\u0119\001\002\000\004" +
    "\102\u011a\001\002\000\004\030\u011b\001\002\000\004\037" +
    "\u011c\001\002\000\004\073\u011d\001\002\000\004\030\uffe7" +
    "\001\002\000\004\101\u011f\001\002\000\004\030\u0120\001" +
    "\002\000\004\034\u0121\001\002\000\004\073\u0122\001\002" +
    "\000\004\030\uffe5\001\002\000\004\102\u0124\001\002\000" +
    "\004\030\u0125\001\002\000\004\040\u0126\001\002\000\004" +
    "\073\u0127\001\002\000\004\030\uffe6\001\002\000\004\100" +
    "\u0129\001\002\000\004\030\u012a\001\002\000\004\033\u012b" +
    "\001\002\000\004\073\u012c\001\002\000\004\030\uffe8\001" +
    "\002\000\004\101\u012e\001\002\000\004\030\u012f\001\002" +
    "\000\004\042\u0130\001\002\000\004\073\u0131\001\002\000" +
    "\004\030\uffe3\001\002\000\004\100\u0133\001\002\000\004" +
    "\030\u0134\001\002\000\004\041\u0135\001\002\000\004\073" +
    "\u0136\001\002\000\004\030\uffe4\001\002\000\004\102\u0138" +
    "\001\002\000\004\030\u0139\001\002\000\004\043\u013a\001" +
    "\002\000\004\073\u013b\001\002\000\004\030\uffe2\001\002" +
    "\000\004\030\uffea\001\002\000\022\033\u0115\034\u0117\036" +
    "\u013e\037\u0118\040\u0116\041\u0113\042\u0114\043\u0112\001\002" +
    "\000\004\073\u013f\001\002\000\004\030\ufff1\001\002\000" +
    "\004\027\u0141\001\002\000\026\005\023\022\036\024\032" +
    "\071\035\074\027\075\037\076\220\100\026\101\022\102" +
    "\025\001\002\000\004\047\u0143\001\002\000\004\027\u0144" +
    "\001\002\000\026\005\023\022\036\024\032\071\035\074" +
    "\027\075\037\076\220\100\026\101\022\102\025\001\002" +
    "\000\004\073\u0146\001\002\000\004\030\uffeb\001\002\000" +
    "\016\031\u0149\032\112\036\110\044\113\060\111\072\107" +
    "\001\002\000\004\030\ufff4\001\002\000\004\073\u014a\001" +
    "\002\000\006\002\ufffc\030\ufffc\001\002\000\004\027\u014c" +
    "\001\002\000\024\005\023\022\036\024\032\071\035\074" +
    "\027\075\037\100\026\101\022\102\025\001\002\000\012" +
    "\013\051\030\u014e\067\052\070\050\001\002\000\006\062" +
    "\u014f\101\u0151\001\002\000\004\101\u015f\001\002\000\010" +
    "\030\u015b\062\u014f\101\u0151\001\002\000\004\022\u0153\001" +
    "\002\000\010\030\ufff9\062\ufff9\101\ufff9\001\002\000\004" +
    "\101\266\001\002\000\006\010\270\023\u0155\001\002\000" +
    "\004\027\u0156\001\002\000\004\024\u0157\001\002\000\022" +
    "\005\023\022\036\024\032\074\027\075\037\100\026\101" +
    "\022\102\025\001\002\000\004\025\u0159\001\002\000\004" +
    "\016\u015a\001\002\000\010\030\ufff7\062\ufff7\101\ufff7\001" +
    "\002\000\004\061\u015d\001\002\000\010\030\ufffa\062\ufffa" +
    "\101\ufffa\001\002\000\004\073\u015e\001\002\000\006\002" +
    "\ufffd\030\ufffd\001\002\000\004\027\u0160\001\002\000\024" +
    "\005\023\022\036\024\032\071\035\074\027\075\037\100" +
    "\026\101\022\102\025\001\002\000\012\013\051\016\u0162" +
    "\067\052\070\050\001\002\000\010\030\ufff8\062\ufff8\101" +
    "\ufff8\001\002\000\004\002\001\001\002\000\006\002\uffff" +
    "\030\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\010\002\003\036\006\040\004\001\001\000" +
    "\004\036\u0163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\032\004\027\005\023\006\030" +
    "\007\033\010\037\001\001\000\002\001\001\000\010\004" +
    "\101\005\023\006\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\032\004\027\005\023" +
    "\006\030\007\064\010\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\057\004\027\005\023\006\030" +
    "\001\001\000\016\003\032\004\027\005\023\006\030\007" +
    "\055\010\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\043\004\027\005\023\006\030\001\001\000" +
    "\012\003\042\004\027\005\023\006\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\032\004\027\005" +
    "\023\006\030\007\045\010\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\032\004\027\005\023\006" +
    "\030\010\054\001\001\000\014\003\032\004\027\005\023" +
    "\006\030\010\053\001\001\000\014\003\032\004\027\005" +
    "\023\006\030\010\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\032\004\027\005\023" +
    "\006\030\007\062\010\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\071\006\030\001\001\000\006\005" +
    "\070\006\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\032\004\027\005\023\006\030\007\073\010" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\100\005\023\006\030\001\001\000\010\004\077\005" +
    "\023\006\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\103\030\105\001\001\000" +
    "\004\030\u0147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\320\025" +
    "\233\001\001\000\002\001\001\000\006\014\117\023\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\137\022\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\032\004\027\005\023" +
    "\006\030\007\221\010\037\031\220\001\001\000\016\003" +
    "\032\004\027\005\023\006\030\007\256\010\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\223\026" +
    "\224\001\001\000\004\026\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\230\025\233\001\001\000" +
    "\002\001\001\000\004\025\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\032\004\027\005\023\006" +
    "\030\007\221\010\037\031\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\032\004\027" +
    "\005\023\006\030\007\261\010\037\032\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\326\024\327\001\001\000" +
    "\002\001\001\000\004\024\331\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\032\004\027\005\023\006\030\007\221\010\037" +
    "\031\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\032\004\027\005\023\006\030\007\221\010\037\031" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\u010e\021\u010f\001" +
    "\001\000\004\021\u013b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\032\004" +
    "\027\005\023\006\030\007\221\010\037\031\u0141\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\032\004" +
    "\027\005\023\006\030\007\221\010\037\031\u0144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\032\004\027\005\023\006\030\007" +
    "\u014c\010\037\001\001\000\002\001\001\000\006\034\u014f" +
    "\035\u0151\001\001\000\002\001\001\000\004\035\u015b\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\u0153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\u0157\005\023\006\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\032\004\027\005\023\006" +
    "\030\007\u0160\010\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintacticoS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintacticoS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintacticoS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     Nodo raiz;
public Nodo getRaiz(){return raiz;}
    // METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
     public String salida="";
    public ArrayList<String> getDatosFigura(){
    return action_obj.gman;
    }
    public int tam1, tam2;
    public LinkedList tab = new LinkedList();
  //  static LinkedList<Element> gmansimb = new LinkedList();
    public boolean err=false;
    public String resultado="";

    public void syntax_error(Symbol s){
    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
            err=true;
            System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
       tab.add(s.right+1);
       tab.add(s.left);
       tab.add(s.value);
        }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
            err=true;
            System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
    }


    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ASintacticoS$actions {


    ArrayList<String> gman = new ArrayList();
    

    //METODOS Y VARIABLES QUE SOLO PUEDEN SER ACCEDIDAS DENTRO DEL PARSER
    int exponente(int exp){
    int resultado= 1;
    for(int i=1; i<exp; i++){
    resultado = resultado *2;
    }
    return resultado;
    }
    
  private final ASintacticoS parser;

  /** Constructor */
  CUP$ASintacticoS$actions(ASintacticoS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ASintacticoS$do_action(
    int                        CUP$ASintacticoS$act_num,
    java_cup.runtime.lr_parser CUP$ASintacticoS$parser,
    java.util.Stack            CUP$ASintacticoS$stack,
    int                        CUP$ASintacticoS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintacticoS$result;

      /* select the action based on the action number */
      switch (CUP$ASintacticoS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // factor ::= CADS 
            {
              Produccion_factor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Cadena(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= id 
            {
              Produccion_factor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Id(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= num 
            {
              Produccion_factor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Numero(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= MENOS expresion 
            {
              Produccion_factor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_expresion a = (Produccion_expresion)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Factor_menos(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= LLAVEA logica LLAVEC 
            {
              Produccion_factor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Logica_llave(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= RQ PARA logica PARC 
            {
              Produccion_factor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Factor_exponente(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= PT PARA logica PARC 
            {
              Produccion_factor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Factor_potencia(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= PARA logica PARC 
            {
              Produccion_factor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Parentesis_logica(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // termino ::= factor 
            {
              Produccion_termino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_factor a = (Produccion_factor)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Termino_factor(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("termino",3, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino ::= factor DIV termino 
            {
              Produccion_termino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		Produccion_factor a = (Produccion_factor)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_termino b = (Produccion_termino)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Termino_division(b,a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("termino",3, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino ::= factor POR termino 
            {
              Produccion_termino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		Produccion_factor a = (Produccion_factor)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_termino b = (Produccion_termino)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Termino_por(b,a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("termino",3, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= termino 
            {
              Produccion_expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_termino a = (Produccion_termino)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Expresion_termino(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= termino MENOS expresion 
            {
              Produccion_expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		Produccion_termino a = (Produccion_termino)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_expresion b = (Produccion_expresion)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Expresion_menos(b,a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= termino MAS expresion 
            {
              Produccion_expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		Produccion_termino a = (Produccion_termino)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_expresion b = (Produccion_expresion)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Expresion_mas(b,a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // in ::= expresion 
            {
              Produccion_expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_expresion a = (Produccion_expresion)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = a;
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("in",1, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // paramet ::= id 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("paramet",25, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // paramet ::= paramet COMA id 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT =a; a.add(b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("paramet",25, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // llam ::= logica 
            {
              Produccion_llam RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Llam_cons(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("llam",24, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // llam ::= id PARA paramet PARC 
            {
              Produccion_llam RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Llam_fuc(new Id(a),b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("llam",24, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // llamada ::= logica 
            {
              Produccion_llamada RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Llamada_logica(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("llamada",23, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // llamada ::= ABREC logica COMA llam CIERRAC 
            {
              Produccion_llamada RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_llam b = (Produccion_llam)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Llamada_funcion(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("llamada",23, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-4)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // rel ::= in 
            {
              Produccion_rel RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_expresion b = (Produccion_expresion)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new In_rel(b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("rel",6, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rel ::= rel MYR in 
            {
              Produccion_rel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		Produccion_rel a = (Produccion_rel)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_expresion b = (Produccion_expresion)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Mayor_rel(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("rel",6, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rel ::= rel MNR in 
            {
              Produccion_rel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		Produccion_rel a = (Produccion_rel)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_expresion b = (Produccion_expresion)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Menor_rel(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("rel",6, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // rel ::= NOT in 
            {
              Produccion_rel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_expresion a = (Produccion_expresion)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Not_rel(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("rel",6, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logica ::= rel 
            {
              Produccion_logica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_rel a = (Produccion_rel)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT =new L_rel(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("logica",5, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logica ::= logica AND rel 
            {
              Produccion_logica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_rel b = (Produccion_rel)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new L_and(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("logica",5, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logica ::= logica XOR rel 
            {
              Produccion_logica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_rel b = (Produccion_rel)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new L_xor(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("logica",5, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logica ::= logica OR rel 
            {
              Produccion_logica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_rel b = (Produccion_rel)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new L_or(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("logica",5, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // l6 ::= D PROD list5 MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		LinkedList<Objeto> b = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Objeto(a,null,b); 
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l6",20, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // list6 ::= l6 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new LinkedList<Objeto>();RESULT.add(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list6",13, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list6 ::= list6 l6 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = a;a.add(b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list6",13, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // l5 ::= CANT IGUAL llamada 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_llamada b = (Produccion_llamada)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l5",19, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // l5 ::= NOM IGUAL CADS 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l5",19, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // l5 ::= SUCURSAL IGUAL num 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l5",19, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // l5 ::= COD IGUAL num 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l5",19, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // l5 ::= TIPO IGUAL CADS 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l5",19, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // list5 ::= l5 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new LinkedList<Objeto>();RESULT.add(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list5",12, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // list5 ::= list5 l5 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = a;a.add(b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list5",12, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // l4 ::= D SUCURSAL D num D SUCURSAL MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // l4 ::= D IMG D CADS D IMG MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // l4 ::= D TAM D llamada D TAM MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		Produccion_llamada b = (Produccion_llamada)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // l4 ::= D COLOR D CADS D COLOR MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // l4 ::= D MARCA D CADS D MARCA MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // l4 ::= D CANT D llamada D CANT MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		Produccion_llamada b = (Produccion_llamada)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // l4 ::= D NOM D CADS D NOM MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // l4 ::= D COD D num D COD MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l4",18, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list4 ::= l4 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new LinkedList<Objeto>();RESULT.add(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list4",11, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list4 ::= list4 l4 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = a;a.add(b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list4",11, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // l3 ::= TEL IGUAL num 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // l3 ::= DIR IGUAL CADS 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // l3 ::= NOM IGUAL CADS 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // l3 ::= PROP IGUAL num 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // l3 ::= COD IGUAL num 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // l3 ::= TIPO IGUAL CADS 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l3",17, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list3 ::= l3 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new LinkedList<Objeto>();RESULT.add(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list3",10, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // list3 ::= list3 COMA l3 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = a;a.add(b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list3",10, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // l2 ::= D IMG D CADS D IMG MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // l2 ::= D TEL D num D TEL MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // l2 ::= D DIR D CADS D DIR MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // l2 ::= D NOM D CADS D NOM MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // l2 ::= D PROP D num D PROP MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // l2 ::= D COD D num D COD MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l2",16, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // list2 ::= l2 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new LinkedList<Objeto>();RESULT.add(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list2",9, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // list2 ::= list2 l2 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = a;a.add(b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list2",9, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // l1 ::= D DIR D CADS D DIR MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // l1 ::= D EM D id D EM MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // l1 ::= D TEL D num D TEL MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // l1 ::= D P D id D P MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // l1 ::= D APE D CADS D APE MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // l1 ::= D NOM D CADS D NOM MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // l1 ::= D IDE D num D IDE MD 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Objeto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("l1",15, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list1 ::= l1 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new LinkedList<Objeto>();//crea_usuario
RESULT.add(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list1",8, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list1 ::= list1 l1 
            {
              LinkedList<Objeto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = a;a.add(b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("list1",8, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // c ::= D GET TIPO IGUAL llamada PROP IGUAL llamada MD 
            {
              Produccion_c RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-4)).right;
		Produccion_llamada a = (Produccion_llamada)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_llamada b = (Produccion_llamada)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Get_tiendas(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",22, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-8)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c ::= D TIENDA IDE IGUAL llamada D list6 D TIENDA MD 
            {
              Produccion_c RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Operaciones_producto(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",22, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-9)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c ::= D PROD list5 MD 
            {
              Produccion_c RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT =  new Crea_modifica_producto(a,"elimin");
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",22, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // c ::= D PROD TIPO IGUAL CADS D list4 D PROD MD 
            {
              Produccion_c RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Crea_modifica_producto(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",22, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-9)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // c ::= D TIENDA list3 MD 
            {
              Produccion_c RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Modifica_Elimina_tienda(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",22, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // c ::= D TIENDA TIPO IGUAL CADS D list2 D TIENDA MD 
            {
              Produccion_c RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Registro_tienda(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",22, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-9)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // c ::= D CU D list1 D CU MD 
            {
              Produccion_c RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		LinkedList<Objeto> a = (LinkedList<Objeto>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Crea_usuario(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",22, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // c ::= D IU D D IDE D num D IDE MD D P D id D P MD D IU MD 
            {
              Produccion_c RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)).value;
		RESULT = new Inicio_usuario(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("c",22, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-19)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= c 
            {
              Produccion_cuerpo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_c b = (Produccion_c)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Unit_cuerpo(b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= cuerpo c 
            {
              Produccion_cuerpo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_cuerpo a = (Produccion_cuerpo)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_c b = (Produccion_c)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new List_cuerpo(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= EXTRAER DE logica DONDE logica PUNTOC 
            {
              Produccion_exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_logica b = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Exp_query2(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= EXTRAER DE logica PUNTOC 
            {
              Produccion_exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Exp_query1(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec ::= id PARA paramet PARC IGUAL LLAVEA expresion LLAVEC PUNTOC 
            {
              Produccion_dec RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).right;
		Produccion_expresion c = (Produccion_expresion)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-2)).value;
		RESULT = new Declara_funcion(a,c,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("dec",27, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-8)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec ::= CONS id IGUAL logica PUNTOC 
            {
              Produccion_dec RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_logica b = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = new Declara_const(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("dec",27, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-4)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declara ::= dec 
            {
              Produccion_declara RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_dec a = (Produccion_dec)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Unit_declara(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("declara",26, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declara ::= declara dec 
            {
              Produccion_declara RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_declara a = (Produccion_declara)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_dec b = (Produccion_dec)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new List_declara(a,b);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("declara",26, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pro ::= D QUERY D exp D QUERY MD 
            {
              Produccion_pro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		Produccion_exp a = (Produccion_exp)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Query(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("pro",28, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pro ::= D R D cuerpo D R MD 
            {
              Produccion_pro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		Produccion_cuerpo a = (Produccion_cuerpo)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Cuerpo(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("pro",28, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-6)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pro ::= D MATE NOM IGUAL logica D declara D MATE MD 
            {
              Produccion_pro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).right;
		Produccion_logica a = (Produccion_logica)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).right;
		Produccion_declara b = (Produccion_declara)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-3)).value;
		RESULT = new Mate(b,a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("pro",28, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-9)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= pro 
            {
              Produccion_progrma RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_pro a = (Produccion_pro)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new Unit_programa(a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= programa pro 
            {
              Produccion_progrma RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Produccion_progrma a = (Produccion_progrma)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_pro b = (Produccion_pro)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT = new List_programa(b,a);
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // raiz ::= programa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()).right;
		Produccion_progrma a = (Produccion_progrma)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.peek()).value;
		RESULT =a;parser.raiz=RESULT;
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("raiz",30, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          return CUP$ASintacticoS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= raiz EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)).value;
		RESULT = start_val;
              CUP$ASintacticoS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.elementAt(CUP$ASintacticoS$top-1)), ((java_cup.runtime.Symbol)CUP$ASintacticoS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintacticoS$parser.done_parsing();
          return CUP$ASintacticoS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

