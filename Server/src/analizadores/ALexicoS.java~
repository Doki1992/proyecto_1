/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>src/analizadores/aLexS.flex</tt>
 */
public class ALexicoS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\64\1\4\1\65\1\64\1\64\22\0\1\64\1\0\1\13"+
    "\1\1\1\12\1\62\2\0\1\16\1\17\1\2\1\15\1\63\1\11"+
    "\1\6\1\3\12\5\1\10\1\22\1\24\1\23\1\25\1\61\1\10"+
    "\1\45\1\52\1\43\1\46\1\32\1\54\1\55\1\7\1\41\2\7"+
    "\1\53\1\51\1\42\1\44\1\47\1\33\1\31\1\36\1\37\1\34"+
    "\1\7\1\50\1\57\1\60\1\7\1\27\1\14\1\30\1\0\1\26"+
    "\1\0\1\45\1\52\1\43\1\46\1\32\1\54\1\55\1\7\1\41"+
    "\2\7\1\53\1\51\1\42\1\44\1\47\1\33\1\31\1\36\1\37"+
    "\1\34\1\7\1\50\1\57\1\60\1\7\1\20\1\10\1\21\7\0"+
    "\1\65\113\0\1\56\37\0\1\56\76\0\2\40\115\0\1\35\u1ea8\0"+
    "\1\65\1\65\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\7"+
    "\1\1\2\7\1\1\1\7\1\27\6\7\2\1\1\30"+
    "\1\31\3\0\1\32\1\0\1\33\1\0\1\7\1\34"+
    "\3\7\1\0\3\7\1\0\2\7\1\0\1\35\1\0"+
    "\1\7\1\35\6\7\1\36\1\0\3\7\1\37\3\7"+
    "\1\40\1\41\1\0\1\4\1\0\1\33\4\7\1\0"+
    "\3\7\2\0\3\7\1\0\1\42\1\7\1\42\7\7"+
    "\1\0\3\7\1\0\3\7\1\43\3\0\1\7\1\0"+
    "\3\7\1\0\1\7\1\44\1\7\1\0\1\45\1\7"+
    "\1\45\1\7\1\0\3\7\2\46\1\0\4\7\1\0"+
    "\4\7\1\0\2\7\1\47\1\0\1\4\1\50\1\7"+
    "\2\51\1\7\1\52\1\0\2\7\1\0\1\7\2\0"+
    "\3\7\1\0\1\7\1\53\1\0\2\7\1\0\1\7"+
    "\1\54\1\7\1\0\1\7\1\0\1\7\1\55\1\0"+
    "\2\7\1\0\2\7\2\56\1\57\1\0\1\7\1\60"+
    "\1\7\2\61\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\0\1\7\2\62\1\63\1\0\2\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\1\0\1\7\2\64\1\65"+
    "\1\0\1\7\1\0\1\7\2\66\2\67\1\0\1\7"+
    "\1\70\1\0\1\7\2\71\1\0\1\7\1\0\1\7"+
    "\2\72\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\73\1\0\1\7"+
    "\2\74\2\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\242\0\330\0\u010e\0\66"+
    "\0\u0144\0\u017a\0\66\0\u01b0\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360"+
    "\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510"+
    "\0\u0546\0\66\0\66\0\u057c\0\u05b2\0\u05e8\0\66\0\u01b0"+
    "\0\66\0\u061e\0\u0654\0\u0144\0\u068a\0\u06c0\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\66"+
    "\0\u08dc\0\u0912\0\u0144\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20"+
    "\0\u0a56\0\u0144\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0144\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\66\0\66\0\u0c06\0\66\0\u0c3c\0\u01b0"+
    "\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec"+
    "\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\66\0\u0f66"+
    "\0\u0144\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0"+
    "\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u0144\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u0144\0\u14e2\0\u1518\0\66\0\u154e"+
    "\0\u0144\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\66\0\u0144"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c"+
    "\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u0144\0\u1950\0\u1950"+
    "\0\u1986\0\u19bc\0\66\0\u0144\0\u19f2\0\u0144\0\u1a28\0\u1a5e"+
    "\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e"+
    "\0\u1c44\0\u1c7a\0\u0144\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u0144\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u0144\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\66\0\u0144\0\66"+
    "\0\u2010\0\u2046\0\u0144\0\u207c\0\66\0\u0144\0\u20b2\0\u20e8"+
    "\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\66\0\u0144\0\u0144\0\u2304\0\u233a\0\u2370\0\u23a6"+
    "\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556"+
    "\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\66\0\u0144"+
    "\0\u0144\0\u26d0\0\u2706\0\u273c\0\u2772\0\66\0\u0144\0\66"+
    "\0\u0144\0\u27a8\0\u27de\0\u0144\0\u2814\0\u284a\0\66\0\u0144"+
    "\0\u2880\0\u28b6\0\u28ec\0\u2922\0\66\0\u0144\0\u2958\0\u298e"+
    "\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e"+
    "\0\u2b74\0\u2baa\0\66\0\u0144\0\u2be0\0\u2c16\0\66\0\u0144"+
    "\0\66\0\u0144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\11\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\11\1\43\1\44\1\45"+
    "\1\11\1\46\3\11\1\47\1\2\2\11\1\50\1\51"+
    "\1\52\1\6\70\0\1\53\1\54\66\0\1\55\66\0"+
    "\1\6\57\0\1\6\6\0\2\7\2\0\1\56\57\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\15\11\1\0\2\11\17\0\1\57\53\0"+
    "\4\60\1\0\6\60\1\61\1\62\51\60\3\0\1\11"+
    "\1\0\4\11\15\0\1\11\2\0\1\11\1\63\1\64"+
    "\1\11\1\0\2\11\1\0\15\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\10\11\1\65\4\11\1\0\1\66\1\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\3\11"+
    "\1\67\1\0\2\11\1\0\15\11\1\0\2\11\41\0"+
    "\1\70\34\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\3\11\1\71\1\0\2\11\1\0\15\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\1\72"+
    "\1\73\2\11\1\0\2\11\1\74\1\75\3\11\1\76"+
    "\10\11\1\0\2\11\47\0\1\77\3\0\1\100\2\0"+
    "\1\101\17\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\0\1\11\1\102\3\11\1\103"+
    "\2\11\1\104\4\11\1\0\2\11\10\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\0\2\11\1\0"+
    "\3\11\1\105\11\11\1\0\2\11\10\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\1\106\3\11\1\0\2\11"+
    "\1\0\3\11\1\107\1\110\10\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\6\11\1\111\6\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\1\11\1\112"+
    "\2\11\1\0\2\11\1\113\1\114\2\11\1\115\11\11"+
    "\1\0\2\11\10\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\1\116\3\11\1\0\1\11\1\117\1\0\4\11"+
    "\1\120\10\11\1\0\2\11\10\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\4\11\1\0\2\11\1\0\4\11"+
    "\1\121\10\11\1\0\2\11\10\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\1\11\1\122\2\11\1\0\2\11"+
    "\1\0\15\11\1\0\2\11\66\0\1\123\66\0\1\124"+
    "\3\0\2\54\1\125\63\54\4\55\1\126\61\55\7\0"+
    "\1\127\21\0\4\127\1\0\2\127\1\0\15\127\1\0"+
    "\2\127\5\0\4\60\1\0\6\60\1\130\1\62\51\60"+
    "\3\0\1\11\1\0\4\11\15\0\1\11\2\0\2\11"+
    "\1\131\1\11\1\0\2\11\1\0\15\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\2\11\1\0\4\11\1\132\10\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\1\11\1\133\1\0\15\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\1\11\1\134"+
    "\2\11\1\0\2\11\1\0\15\11\1\0\2\11\50\0"+
    "\1\135\25\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\0\2\11\1\136\12\11\1\0"+
    "\2\11\10\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\3\11\1\137\1\0\2\11\1\0\15\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\2\11\1\0\12\11\1\140\2\11\1\0\2\11"+
    "\37\0\1\141\14\0\1\142\21\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\1\11\1\143\2\11\1\0\2\11"+
    "\1\0\6\11\1\144\6\11\1\0\2\11\10\0\1\11"+
    "\1\0\4\11\15\0\1\11\2\0\4\11\1\0\2\11"+
    "\1\0\10\11\1\145\4\11\1\0\2\11\45\0\2\146"+
    "\101\0\1\147\13\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\4\11\1\0\2\11\1\146\1\150\14\11\1\0"+
    "\2\11\10\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\0\14\11\1\151\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\2\11\1\0\10\11\1\152\4\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\1\11"+
    "\1\153\2\11\1\0\2\11\1\0\15\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\2\11\1\0\1\11\1\154\3\11\1\155\4\11"+
    "\1\156\2\11\1\0\2\11\10\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\4\11\1\0\2\11\1\0\1\11"+
    "\1\157\13\11\1\0\2\11\10\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\1\11\1\160\2\11\1\0\2\11"+
    "\1\0\15\11\1\0\2\11\36\0\1\161\37\0\1\11"+
    "\1\0\4\11\15\0\1\11\2\0\1\162\3\11\1\0"+
    "\2\11\1\0\15\11\1\0\2\11\10\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\0\2\11\1\0"+
    "\1\11\1\163\13\11\1\0\2\11\10\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\0\2\11\1\0"+
    "\3\11\1\164\11\11\1\0\2\11\10\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\165\1\166\1\11"+
    "\1\0\15\11\1\0\2\11\10\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\1\167\3\11\1\0\1\11\1\170"+
    "\1\0\15\11\1\0\2\11\10\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\4\11\1\0\1\11\1\171\1\0"+
    "\15\11\1\0\2\11\5\0\1\172\1\126\1\173\63\172"+
    "\3\0\1\127\1\0\4\127\1\174\14\0\1\127\2\0"+
    "\4\127\1\0\2\127\1\0\15\127\1\0\2\127\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\3\11\1\175"+
    "\1\0\2\11\1\0\15\11\1\0\2\11\10\0\1\11"+
    "\1\0\4\11\15\0\1\11\2\0\4\11\1\0\2\11"+
    "\1\176\1\177\14\11\1\0\2\11\10\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\1\200\3\11\1\0\2\11"+
    "\1\0\15\11\1\0\2\11\10\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\1\201\3\11\1\0\2\11\1\0"+
    "\15\11\1\0\2\11\41\0\1\202\34\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\3\11\1\203\1\0\2\11"+
    "\1\0\15\11\1\0\2\11\10\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\1\11\1\204\2\11\1\0\2\11"+
    "\1\0\15\11\1\0\2\11\10\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\1\11\1\205\2\11\1\0\2\11"+
    "\1\0\15\11\1\0\2\11\47\0\1\206\67\0\1\207"+
    "\24\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\2\11\1\0\1\11\1\210\13\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\2\11\1\0\3\11\1\211\11\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\2\11\1\0\4\11\1\212\10\11\1\0\2\11"+
    "\50\0\1\213\25\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\4\11\1\0\2\11\1\0\2\11\1\214\12\11"+
    "\1\0\2\11\10\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\4\11\1\0\2\11\1\0\11\11\1\215\3\11"+
    "\1\0\2\11\10\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\4\11\1\0\2\11\1\0\4\11\1\216\10\11"+
    "\1\0\2\11\10\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\4\11\1\217\1\220\1\11\1\0\15\11\1\0"+
    "\2\11\10\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\221\1\222\14\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\2\11\1\0\3\11\1\223\11\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\1\11\1\224\1\0\15\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\12\11\1\225\2\11\1\0\2\11\37\0"+
    "\1\226\36\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\1\11\1\227\2\11\1\0\2\11\1\0\15\11\1\0"+
    "\2\11\10\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\0\5\11\1\230\7\11\1\0"+
    "\2\11\10\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\0\5\11\1\231\1\232\6\11"+
    "\1\0\2\11\42\0\2\233\32\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\4\11\1\233\1\234\1\11\1\0"+
    "\15\11\1\0\2\11\10\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\4\11\1\0\2\11\1\0\2\11\1\235"+
    "\12\11\1\0\2\11\10\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\1\11\1\236\2\11\1\0\2\11\1\0"+
    "\15\11\1\0\2\11\5\0\1\54\1\237\1\125\64\54"+
    "\1\240\1\125\63\54\5\0\1\241\63\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\1\11\1\242\2\11\1\0"+
    "\2\11\1\0\15\11\1\0\2\11\60\0\1\243\15\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\12\11\1\244\2\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\4\11\1\245\10\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\15\11\1\0\1\11\1\246\36\0\1\247"+
    "\37\0\1\11\1\0\4\11\15\0\1\11\2\0\1\250"+
    "\3\11\1\0\2\11\1\0\15\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\13\11\1\251\1\11\1\0\2\11\53\0"+
    "\1\252\22\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\0\5\11\1\253\7\11\1\0"+
    "\2\11\10\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\0\15\11\1\254\2\11\45\0"+
    "\2\255\27\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\255\1\256\14\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\1\257"+
    "\3\11\1\0\2\11\1\0\15\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\1\260\3\11"+
    "\1\0\2\11\1\0\15\11\1\0\2\11\62\0\1\261"+
    "\13\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\2\11\1\0\14\11\1\262\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\1\263\3\11"+
    "\1\0\2\11\1\0\15\11\1\0\2\11\10\0\1\11"+
    "\1\0\4\11\15\0\1\11\2\0\4\11\1\0\2\11"+
    "\1\264\1\265\14\11\1\0\2\11\10\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\0\2\11\1\0"+
    "\12\11\1\266\2\11\1\0\2\11\50\0\1\267\25\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\2\11\1\270\12\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\1\11\1\271"+
    "\2\11\1\0\2\11\1\0\15\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\3\11\1\272"+
    "\1\0\2\11\1\0\15\11\1\0\2\11\10\0\1\11"+
    "\1\0\4\11\15\0\1\11\2\0\4\11\1\0\2\11"+
    "\1\273\1\274\14\11\1\0\2\11\55\0\1\275\20\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\7\11\1\276\5\11\1\0\2\11\10\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\4\11\1\277\10\11\1\0\2\11\6\0"+
    "\1\172\71\0\2\241\62\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\4\11\1\300\1\301\1\11\1\0\15\11"+
    "\1\0\2\11\10\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\1\11\1\302\2\11\1\0\2\11\1\0\15\11"+
    "\1\0\2\11\42\0\2\303\32\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\4\11\1\303\1\304\1\11\1\0"+
    "\15\11\1\0\2\11\10\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\4\11\1\0\2\11\1\0\3\11\1\305"+
    "\11\11\1\0\2\11\52\0\1\306\23\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\0\2\11\1\0"+
    "\4\11\1\307\10\11\1\0\2\11\51\0\1\310\65\0"+
    "\1\311\24\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\0\3\11\1\312\11\11\1\0"+
    "\2\11\10\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\1\11\1\313\2\11\1\0\2\11\1\0\15\11\1\0"+
    "\2\11\10\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\3\11\1\314\1\0\2\11\1\0\15\11\1\0\2\11"+
    "\51\0\1\315\24\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\4\11\1\0\2\11\1\0\3\11\1\316\11\11"+
    "\1\0\2\11\53\0\1\317\22\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\4\11\1\0\2\11\1\0\5\11"+
    "\1\320\7\11\1\0\2\11\10\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\4\11\1\0\2\11\1\321\1\322"+
    "\14\11\1\0\2\11\50\0\1\323\25\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\0\2\11\1\0"+
    "\2\11\1\324\12\11\1\0\2\11\10\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\0\2\11\1\0"+
    "\2\11\1\325\12\11\1\0\2\11\37\0\1\326\36\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\1\11\1\327"+
    "\2\11\1\0\2\11\1\0\15\11\1\0\2\11\51\0"+
    "\1\330\24\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\0\3\11\1\331\11\11\1\0"+
    "\2\11\44\0\1\332\31\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\4\11\1\0\1\11\1\333\1\0\15\11"+
    "\1\0\2\11\10\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\1\334\3\11\1\0\2\11\1\0\15\11\1\0"+
    "\2\11\52\0\1\335\23\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\4\11\1\0\2\11\1\0\4\11\1\336"+
    "\10\11\1\0\2\11\10\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\4\11\1\0\2\11\1\0\1\11\1\337"+
    "\13\11\1\0\2\11\41\0\1\340\34\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\3\11\1\341\1\0\2\11"+
    "\1\0\15\11\1\0\2\11\10\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\4\11\1\342\1\343\1\11\1\0"+
    "\15\11\1\0\2\11\52\0\1\344\23\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\0\2\11\1\0"+
    "\4\11\1\345\10\11\1\0\2\11\53\0\1\346\22\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\5\11\1\347\7\11\1\0\2\11\45\0"+
    "\2\350\27\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\350\1\351\14\11\1\0\2\11"+
    "\10\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\1\11\1\352\1\0\15\11\1\0\2\11\44\0"+
    "\1\353\31\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\1\11\1\354\1\0\15\11\1\0\2\11"+
    "\36\0\1\355\37\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\1\356\3\11\1\0\2\11\1\0\15\11\1\0"+
    "\2\11\60\0\1\357\15\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\4\11\1\0\2\11\1\0\12\11\1\360"+
    "\2\11\1\0\2\11\10\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\4\11\1\0\2\11\1\0\3\11\1\361"+
    "\11\11\1\0\2\11\42\0\2\362\32\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\362\1\363\1\11"+
    "\1\0\15\11\1\0\2\11\41\0\1\364\34\0\1\11"+
    "\1\0\4\11\15\0\1\11\2\0\3\11\1\365\1\0"+
    "\2\11\1\0\15\11\1\0\2\11\53\0\1\366\22\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\5\11\1\367\7\11\1\0\2\11\51\0"+
    "\1\370\24\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\4\11\1\0\2\11\1\0\3\11\1\371\11\11\1\0"+
    "\2\11\51\0\1\372\24\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\4\11\1\0\2\11\1\0\3\11\1\373"+
    "\11\11\1\0\2\11\10\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\4\11\1\0\2\11\1\0\3\11\1\374"+
    "\11\11\1\0\2\11\52\0\1\375\23\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\0\2\11\1\0"+
    "\4\11\1\376\10\11\1\0\2\11\53\0\1\377\22\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\5\11\1\u0100\7\11\1\0\2\11\41\0"+
    "\1\u0101\34\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\3\11\1\u0102\1\0\2\11\1\0\15\11\1\0\2\11"+
    "\52\0\1\u0103\23\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\4\11\1\0\2\11\1\0\4\11\1\u0104\10\11"+
    "\1\0\2\11\47\0\1\u0105\26\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\4\11\1\0\2\11\1\0\1\11"+
    "\1\u0106\13\11\1\0\2\11\36\0\1\u0107\37\0\1\11"+
    "\1\0\4\11\15\0\1\11\2\0\1\u0108\3\11\1\0"+
    "\2\11\1\0\15\11\1\0\2\11\52\0\1\u0109\23\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\0\4\11\1\u010a\10\11\1\0\2\11\36\0"+
    "\1\u010b\37\0\1\11\1\0\4\11\15\0\1\11\2\0"+
    "\1\u010c\3\11\1\0\2\11\1\0\15\11\1\0\2\11"+
    "\45\0\2\u010d\27\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\4\11\1\0\2\11\1\u010d\1\u010e\14\11\1\0"+
    "\2\11\36\0\1\u010f\37\0\1\11\1\0\4\11\15\0"+
    "\1\11\2\0\1\u0110\3\11\1\0\2\11\1\0\15\11"+
    "\1\0\2\11\45\0\2\u0111\27\0\1\11\1\0\4\11"+
    "\15\0\1\11\2\0\4\11\1\0\2\11\1\u0111\1\u0112"+
    "\14\11\1\0\2\11\51\0\1\u0113\24\0\1\11\1\0"+
    "\4\11\15\0\1\11\2\0\4\11\1\0\2\11\1\0"+
    "\3\11\1\u0114\11\11\1\0\2\11\45\0\2\u0115\27\0"+
    "\1\11\1\0\4\11\15\0\1\11\2\0\4\11\1\0"+
    "\2\11\1\u0115\1\u0116\14\11\1\0\2\11\51\0\1\u0117"+
    "\24\0\1\11\1\0\4\11\15\0\1\11\2\0\4\11"+
    "\1\0\2\11\1\0\3\11\1\u0118\11\11\1\0\2\11"+
    "\51\0\1\u0119\24\0\1\11\1\0\4\11\15\0\1\11"+
    "\2\0\4\11\1\0\2\11\1\0\3\11\1\u011a\11\11"+
    "\1\0\2\11\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11340];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\1\11\2\1\1\11"+
    "\1\1\14\11\21\1\2\11\3\0\1\11\1\0\1\11"+
    "\1\0\5\1\1\0\3\1\1\0\2\1\1\0\1\11"+
    "\1\0\11\1\1\0\7\1\2\11\1\0\1\11\1\0"+
    "\5\1\1\0\3\1\2\0\3\1\1\0\1\11\11\1"+
    "\1\0\3\1\1\0\4\1\3\0\1\1\1\0\3\1"+
    "\1\0\3\1\1\0\1\11\3\1\1\0\3\1\1\11"+
    "\1\1\1\0\4\1\1\0\4\1\1\0\3\1\1\0"+
    "\3\1\1\11\3\1\1\0\2\1\1\0\1\1\2\0"+
    "\3\1\1\0\2\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\2\1\1\11"+
    "\1\1\1\11\1\0\3\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\2\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\2\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
//VARIALES Y METODOS DEL SCANER
public static LinkedList<String> tokens  = new LinkedList();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ALexicoS(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ALexicoS(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Error lexico: "+yytext());
          }
        case 62: break;
        case 2: 
          { return new Symbol(sym.POR,yycolumn,yyline, new String("*"));
          }
        case 63: break;
        case 3: 
          { return new Symbol(sym.DIV,yycolumn,yyline, new String("/"));
          }
        case 64: break;
        case 4: 
          { /* Se ignoran */
          }
        case 65: break;
        case 5: 
          { return new Symbol(sym.num, yycolumn,yyline,new String(yytext()));
          }
        case 66: break;
        case 6: 
          { return new Symbol(sym.PUNTO,yycolumn,yyline, new String("."));
          }
        case 67: break;
        case 7: 
          { return new Symbol(sym.id, yycolumn,yyline,new String(yytext()));
          }
        case 68: break;
        case 8: 
          { return new Symbol(sym.MENOS,yycolumn,yyline, new String("-"));
          }
        case 69: break;
        case 9: 
          { return new Symbol(sym.D,yycolumn,yyline, new String("$"));
          }
        case 70: break;
        case 10: 
          { return new Symbol(sym.COMILLA,yycolumn,yyline, new String("\""));
          }
        case 71: break;
        case 11: 
          { return new Symbol(sym.MAS,yycolumn,yyline, new String("+"));
          }
        case 72: break;
        case 12: 
          { return new Symbol(sym.PARA,yycolumn,yyline, new String("("));
          }
        case 73: break;
        case 13: 
          { return new Symbol(sym.PARC,yycolumn,yyline, new String(")"));
          }
        case 74: break;
        case 14: 
          { return new Symbol(sym.LLAVEA,yycolumn,yyline, new String("{"));
          }
        case 75: break;
        case 15: 
          { return new Symbol(sym.LLAVEC,yycolumn,yyline, new String("}"));
          }
        case 76: break;
        case 16: 
          { return new Symbol(sym.PUNTOC,yycolumn,yyline, new String(";"));
          }
        case 77: break;
        case 17: 
          { return new Symbol(sym.IGUAL,yycolumn,yyline, new String("="));
          }
        case 78: break;
        case 18: 
          { return new Symbol(sym.MNR,yycolumn,yyline, new String("<"));
          }
        case 79: break;
        case 19: 
          { return new Symbol(sym.MYR,yycolumn,yyline, new String(">"));
          }
        case 80: break;
        case 20: 
          { return new Symbol(sym.BAJO,yycolumn,yyline, new String("_"));
          }
        case 81: break;
        case 21: 
          { return new Symbol(sym.ABREC,yycolumn,yyline, new String("["));
          }
        case 82: break;
        case 22: 
          { return new Symbol(sym.CIERRAC,yycolumn,yyline, new String("]"));
          }
        case 83: break;
        case 23: 
          { return new Symbol(sym.NOT,yycolumn,yyline, new String("N"));
          }
        case 84: break;
        case 24: 
          { return new Symbol(sym.COMA,yycolumn,yyline, new String(","));
          }
        case 85: break;
        case 25: 
          { return new Symbol(sym.OR,yycolumn,yyline, new String("##"));
          }
        case 86: break;
        case 26: 
          { return new Symbol(sym.MD,yycolumn,yyline, new String(yytext()));
          }
        case 87: break;
        case 27: 
          { return new Symbol(sym.CADS,yycolumn,yyline, new String(yytext()));
          }
        case 88: break;
        case 28: 
          { return new Symbol(sym.RQ,yycolumn,yyline, new String(yytext()));
          }
        case 89: break;
        case 29: 
          { return new Symbol(sym.IDE,yycolumn,yyline, new String(yytext()));
          }
        case 90: break;
        case 30: 
          { return new Symbol(sym.DE,yycolumn,yyline, new String(yytext()));
          }
        case 91: break;
        case 31: 
          { return new Symbol(sym.PT,yycolumn,yyline, new String(yytext()));
          }
        case 92: break;
        case 32: 
          { return new Symbol(sym.XOR,yycolumn,yyline, new String("??"));
          }
        case 93: break;
        case 33: 
          { return new Symbol(sym.AND,yycolumn,yyline, new String("%%"));
          }
        case 94: break;
        case 34: 
          { return new Symbol(sym.IMG,yycolumn,yyline, new String(yytext()));
          }
        case 95: break;
        case 35: 
          { return new Symbol(sym.GET,yycolumn,yyline, new String(yytext()));
          }
        case 96: break;
        case 36: 
          { return new Symbol(sym.T,yycolumn,yyline, new String(yytext()));
          }
        case 97: break;
        case 37: 
          { return new Symbol(sym.TIPO,yycolumn,yyline, new String(yytext()));
          }
        case 98: break;
        case 38: 
          { return new Symbol(sym.CONS,yycolumn,yyline, new String(yytext()));
          }
        case 99: break;
        case 39: 
          { return new Symbol(sym.MATE,yycolumn,yyline, new String(yytext()));
          }
        case 100: break;
        case 40: 
          { return new Symbol(sym.FECHA,yycolumn,yyline, new String(yytext()));
          }
        case 101: break;
        case 41: 
          { return new Symbol(sym.EM,yycolumn,yyline, new String(yytext()));
          }
        case 102: break;
        case 42: 
          { return new Symbol(sym.QUERY,yycolumn,yyline, new String(yytext()));
          }
        case 103: break;
        case 43: 
          { return new Symbol(sym.COLOR,yycolumn,yyline, new String(yytext()));
          }
        case 104: break;
        case 44: 
          { return new Symbol(sym.DONDE,yycolumn,yyline, new String(yytext()));
          }
        case 105: break;
        case 45: 
          { return new Symbol(sym.MARCA,yycolumn,yyline, new String(yytext()));
          }
        case 106: break;
        case 46: 
          { return new Symbol(sym.TIENDA,yycolumn,yyline, new String(yytext()));
          }
        case 107: break;
        case 47: 
          { return new Symbol(sym.TAM,yycolumn,yyline, new String(yytext()));
          }
        case 108: break;
        case 48: 
          { return new Symbol(sym.NOM,yycolumn,yyline, new String(yytext()));
          }
        case 109: break;
        case 49: 
          { return new Symbol(sym.COD,yycolumn,yyline, new String(yytext()));
          }
        case 110: break;
        case 50: 
          { return new Symbol(sym.R,yycolumn,yyline, new String(yytext()));
          }
        case 111: break;
        case 51: 
          { return new Symbol(sym.EXTRAER,yycolumn,yyline, new String(yytext()));
          }
        case 112: break;
        case 52: 
          { return new Symbol(sym.SUCURSAL,yycolumn,yyline, new String(yytext()));
          }
        case 113: break;
        case 53: 
          { return new Symbol(sym.TEL,yycolumn,yyline, new String(yytext()));
          }
        case 114: break;
        case 54: 
          { return new Symbol(sym.CANT,yycolumn,yyline, new String(yytext()));
          }
        case 115: break;
        case 55: 
          { return new Symbol(sym.APE,yycolumn,yyline, new String(yytext()));
          }
        case 116: break;
        case 56: 
          { return new Symbol(sym.PROD,yycolumn,yyline, new String(yytext()));
          }
        case 117: break;
        case 57: 
          { return new Symbol(sym.P,yycolumn,yyline, new String(yytext()));
          }
        case 118: break;
        case 58: 
          { return new Symbol(sym.DIR,yycolumn,yyline, new String(yytext()));
          }
        case 119: break;
        case 59: 
          { return new Symbol(sym.PROP,yycolumn,yyline, new String(yytext()));
          }
        case 120: break;
        case 60: 
          { return new Symbol(sym.CU,yycolumn,yyline, new String(yytext()));
          }
        case 121: break;
        case 61: 
          { return new Symbol(sym.IU,yycolumn,yyline, new String(yytext()));
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym1.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
