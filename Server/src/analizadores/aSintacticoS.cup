    package analizadores;
    import java.io.*;
    import Arbol.*;
    import java_cup.runtime.*;
    import java.util.LinkedList;
    import java.util.ArrayList;
    import javax.swing.ImageIcon;
    import java.util.Hashtable;

    parser code
    {:
     Nodo raiz;
public Nodo getRaiz(){return raiz;}
    // METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
     public String salida="";
    public ArrayList<String> getDatosFigura(){
    return action_obj.gman;
    }
    public int tam1, tam2;
    public LinkedList tab = new LinkedList();
  //  static LinkedList<Element> gmansimb = new LinkedList();
    public boolean err=false;
    public String resultado="";

    public void syntax_error(Symbol s){
    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
            err=true;
            System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
       tab.add(s.right+1);
       tab.add(s.left);
       tab.add(s.value);
        }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
            err=true;
            System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
    }


    :}
    action code
    {:
    ArrayList<String> gman = new ArrayList();
    

    //METODOS Y VARIABLES QUE SOLO PUEDEN SER ACCEDIDAS DENTRO DEL PARSER
    int exponente(int exp){
    int resultado= 1;
    for(int i=1; i<exp; i++){
    resultado = resultado *2;
    }
    return resultado;
    }
    :}

    terminal String MAS, MENOS, POR, DIV, COMA, MNR, MYR, XOR, COMILLA, FECHA, PUNTOC, PUNTO, PUNTOS, BAJO, PARA, PARC, LLAVEA, LLAVEC; 
    terminal String FECHAC, IGUAL, D, R, IU, IDE, P, T, CU, NOM, APE, TEL, EM, DIR;
    terminal String TIENDA, TIPO, COD, PROP, IMG, PROP2, TIPO2, CANT, MARCA, COLOR, TAM, SUCURSAL, PROD, MATE, CONS, EXTRAER, DE, QUERY;
    terminal String DONDE, OR, AND, NOT, GET, MD, PT, RQ, ABREC, CIERRAC;
    terminal String num;
    terminal String id;
    terminal String CADS;
    non terminal Produccion_progrma programa; 
    non terminal Produccion_expresion in, expresion;
    non terminal Produccion_termino termino; 
    non terminal Produccion_factor factor; 
    non terminal Produccion_logica logica; 
    non terminal Produccion_rel rel; 
    non terminal Produccion_cuerpo cuerpo; 
    non terminal LinkedList<Objeto> list1, list2, list3, list4, list5, list6;
    non terminal Objeto l1, l2, l3, l4, l5,l6;
    non terminal Produccion_c c;
    non terminal Produccion_llamada llamada; 
    non terminal Produccion_llam llam; 
    non terminal Produccion_paramet paramet;
    non terminal Produccion_declara declara; 
    non terminal Produccion_dec dec; 
    non terminal Produccion_pro pro;
    non terminal Produccion_exp exp;
    non terminal Nodo raiz;

    precedence left MAS, MENOS;
    precedence left POR, DIV;
    precedence left MD;

    
//INICIO DEL PARSER
    start with raiz;

//NIVEL 1
    raiz::= programa:a{:RESULT =a;parser.raiz=RESULT;:};
    programa::=  programa:a pro:b {:RESULT = new List_programa(b,a);:}| pro:a {:RESULT = new Unit_programa(a);:};
    pro::=     D MATE NOM IGUAL logica:a D 
                declara:b
               D MATE MD{:RESULT = new Mate(b,a);:}

                |D R D 
                    cuerpo:a
                 D R MD 
                 {:RESULT = new Cuerpo(a);:}
                |D QUERY D 
                     exp:a
                 D QUERY MD {:RESULT = new Query(a);:};
                
    declara::= declara:a dec:b {:RESULT = new List_declara(a,b);:}| dec:a{:RESULT = new Unit_declara(a);:};
    dec::= CONS id:a IGUAL logica:b PUNTOC {:RESULT = new Declara_const(a,b);:}
                | id:a PARA paramet:b PARC IGUAL LLAVEA logica:c LLAVEC PUNTOC{:RESULT = new Declara_funcion(a,c,b);:};
     
    exp::= EXTRAER DE logica:a PUNTOC {:RESULT = new Exp_query1(a);:}| EXTRAER DE logica:a DONDE logica:b PUNTOC{:RESULT = new Exp_query2(a,b);:};            
                
    cuerpo::= cuerpo:a c:b {:RESULT = new List_cuerpo(a,b);:}| c:b{:RESULT = new Unit_cuerpo(b);:};
    c::= D IU D 
                D IDE D num:a D IDE MD 
                D P D id:b D P MD 
              D IU MD {:RESULT = new Inicio_usuario(a,b);:} //inicio de usuario

              |D CU D 
                list1:a
               D CU MD {:RESULT = new Crea_usuario(a);:} //crear usuario
              
              |D TIENDA TIPO IGUAL CADS D
                list2:a
               D TIENDA MD {:RESULT = new Registro_tienda(a);:}//registro de tienda
              
              | D TIENDA list3:a MD {:RESULT = new Modifica_tienda(a);:}//modifica tienda
                
              | D PROD TIPO IGUAL CADS D //elimina tienda
                list4:a
                D PROD MD {:RESULT = new Elimina_tienda(a);:}

              | D PROD list5:a MD {:RESULT = new Crea_producto(a);:}//crea producto
              
              | D TIENDA IDE IGUAL llamada D //operaciones sobre productos
                list6:a
               D TIENDA MD  {:RESULT = new Operaciones_producto(a);:}
              
              | D GET TIPO IGUAL llamada:a PROP IGUAL llamada:b MD {:RESULT = new Get_tiendas(a,b);:}; 

//NIVEL 2 LISTAS DENTRO DE NIVEL 1

    list1::= list1:a l1:b {:RESULT = a;a.add(b);:} | l1:a{:RESULT = new LinkedList<Objeto>();//crea_usuario
RESULT.add(a);:};
    l1::= D IDE:a D num:b D IDE MD {:RESULT = new Objeto(a,b);:}
                |D NOM:a D CADS:b D NOM MD {:RESULT = new Objeto(a,b);:}
                |D APE:a D CADS:b D APE MD {:RESULT = new Objeto(a,b);:}
                |D P:a D id:b D P MD {:RESULT = new Objeto(a,b);:}
                |D TEL:a D num:b D TEL MD {:RESULT = new Objeto(a,b);:} 
                |D EM:a D id:b D EM MD {:RESULT = new Objeto(a,b);:}
                |D DIR:a D CADS:b D DIR MD {:RESULT = new Objeto(a,b);:}; 
    //registra tienda
    list2::= list2:a l2:b {:RESULT = a;a.add(b);:}| l2:a{:RESULT = new LinkedList<Objeto>();RESULT.add(a);:};
    l2::= D COD:a D num:b D COD MD {:RESULT = new Objeto(a,b);:}
                |D PROP:a D num:b D PROP MD {:RESULT = new Objeto(a,b);:}
                |D NOM:a D CADS:b D NOM MD {:RESULT = new Objeto(a,b);:}
                |D DIR:a D CADS:b D DIR MD {:RESULT = new Objeto(a,b);:}
                |D TEL:a D num:b D TEL MD {:RESULT = new Objeto(a,b);:}
                |D IMG:a D CADS:b D IMG MD {:RESULT = new Objeto(a,b);:};

//modifica tienda
   list3::= list3:a COMA l3:b {:RESULT = a;a.add(b);:}| l3:a {:RESULT = new LinkedList<Objeto>();RESULT.add(a);:};
    l3::= TIPO:a IGUAL CADS:b {:RESULT = new Objeto(a,b);:}
            | COD:a IGUAL num:b {:RESULT = new Objeto(a,b);:}
            | PROP:a IGUAL num:b {:RESULT = new Objeto(a,b);:}
            | NOM:a IGUAL CADS:b {:RESULT = new Objeto(a,b);:}
            | DIR:a IGUAL CADS:b {:RESULT = new Objeto(a,b);:}
            | TEL:a IGUAL num:b {:RESULT = new Objeto(a,b);:}; 

   list4::= list4:a l4:b {:RESULT = a;a.add(b);:}| l4:a{:RESULT = new LinkedList<Objeto>();RESULT.add(a);:}; //elimina tienda 
    l4::= D COD:a D llamada:b D COD MD {:RESULT = new Objeto(a,b);:}
            | D NOM:a D llamada:b D NOM MD {:RESULT = new Objeto(a,b);:}
            | D CANT:a D llamada:b D CANT MD {:RESULT = new Objeto(a,b);:}
            | D MARCA:a D llamada:b D MARCA MD {:RESULT = new Objeto(a,b);:}
            | D COLOR:a D llamada:b D COLOR MD {:RESULT = new Objeto(a,b);:}
            | D TAM:a D llamada:b D TAM MD {:RESULT = new Objeto(a,b);:}
            | D IMG:a D llamada:b D IMG MD {:RESULT = new Objeto(a,b);:}
            | D SUCURSAL:a D llamada:b D SUCURSAL MD {:RESULT = new Objeto(a,b);:}; 


   list5::= list5:a l5:b {:RESULT = a;a.add(b);:}| l5:a {:RESULT = new LinkedList<Objeto>();RESULT.add(a);:}; //crea producto
    l5::= TIPO:a IGUAL llamada:b {:RESULT = new Objeto(a,b);:}
            | COD:a IGUAL llamada:b {:RESULT = new Objeto(a,b);:}
            | SUCURSAL:a IGUAL llamada:b {:RESULT = new Objeto(a,b);:}
            | NOM:a IGUAL llamada:b {:RESULT = new Objeto(a,b);:}
            | CANT:a IGUAL llamada:b {:RESULT = new Objeto(a,b);:};


    list6::= list6:a l6:b {:RESULT = a;a.add(b);:}| l6:a {:RESULT = new LinkedList<Objeto>();RESULT.add(a);:}; //acciones sobre productos
    l6::= D PROD:a list5:b MD {:RESULT = new Objeto(a,null,b); :};

//NIVEL 3 EXPRESIONES LOGICAS

    logica::= logica:a OR rel:b {:RESULT = new L_or(a,b);:}
            | logica:a XOR rel:b {:RESULT = new L_xor(a,b);:}
            | logica:a AND rel:b {:RESULT = new L_and(a,b);:}
            | rel:a {:RESULT =new L_rel(a);:};

    rel::=  NOT in:a {:RESULT = new Not_rel(a);:}
            |rel:a MNR in:b {:RESULT = new Menor_rel(a,b);:}
            | rel:a MYR in:b {:RESULT = new Mayor_rel(a,b);:}
            | in:b {:RESULT = new In_rel(b);:};
 
llamada::= ABREC logica:a COMA llam:b CIERRAC {:RESULT = new Llamada_funcion(a,b);:}
            | logica:a {:RESULT = new Llamada_logica(a);:};
llam::= id:a PARA paramet:b PARC {:RESULT = new Llam_fuc(new Id(a),b);:}
            | logica:a {:RESULT = new Llam_cons(a);:};
paramet::= paramet:a COMA logica:b {:RESULT = new Paramet_dos(a,b);:} | logica:a {:RESULT = new Paramet_uno(a);:};

//NIVEL 4 -  EXPRESIONES Y FACTORES  
 
    in::= expresion:a {:RESULT = a;:};

    expresion::= termino:a MAS expresion:b {:RESULT = new Expresion_mas(b,a);:}
    | termino:a MENOS expresion:b {:RESULT = new Expresion_menos(b,a);:}
    | termino:a {:RESULT = new Expresion_termino(a);:};

    termino::= factor:a POR termino:b{:RESULT = new Termino_por(b,a);:}
    |factor:a DIV termino:b{:RESULT = new Termino_division(b,a);:}
    |factor:a {:RESULT = new Termino_factor(a);:};

    factor::= PARA logica:a PARC {:RESULT = new Parentesis_logica(a);:}
    | PT PARA logica:a PARC {:RESULT = new Factor_potencia(a);:}
    | RQ PARA logica:a PARC {:RESULT = new Factor_exponente(a);:}
    | LLAVEA logica:a LLAVEC {:RESULT = new Logica_llave(a);:}
    | MENOS expresion:a {:RESULT = new Factor_menos(a);:}
    | num:a {:RESULT = new Numero(a);:}
    | id:a {:RESULT = new Id(a);:}
    | CADS:a {:RESULT = new Cadena(a);:};


