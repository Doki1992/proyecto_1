/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package client;

import java_cup.runtime.Symbol;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>src/client/aLexC.flex</tt>
 */
public class ALexicoC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\4\1\62\1\61\1\61\22\0\1\61\1\31\1\15"+
    "\1\1\1\14\2\0\1\17\1\22\1\23\1\2\1\20\1\33\1\13"+
    "\1\6\1\3\12\5\1\11\1\26\1\27\1\12\1\30\2\0\1\44"+
    "\1\57\1\51\1\50\1\35\1\53\1\54\1\7\1\46\2\7\1\37"+
    "\1\55\1\56\1\47\1\36\1\7\1\34\1\43\1\52\1\41\3\7"+
    "\1\40\1\7\1\0\1\16\1\0\1\21\1\32\1\0\1\44\1\57"+
    "\1\51\1\50\1\35\1\53\1\54\1\7\1\46\2\7\1\37\1\55"+
    "\1\56\1\47\1\36\1\7\1\34\1\43\1\52\1\41\3\7\1\40"+
    "\1\7\1\24\1\10\1\25\7\0\1\62\113\0\1\60\37\0\1\60"+
    "\76\0\2\45\115\0\1\42\u1ea8\0\1\62\1\62\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\1"+
    "\1\26\1\27\5\7\1\1\2\7\1\1\7\7\2\0"+
    "\1\30\1\31\1\32\1\33\1\0\1\34\3\0\1\35"+
    "\1\36\1\37\1\40\1\41\4\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\2\42\1\7\1\0\6\7\1\0"+
    "\5\7\1\0\1\43\1\34\1\35\3\7\1\0\2\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7"+
    "\1\0\7\7\1\0\2\7\1\0\4\7\2\0\1\7"+
    "\1\0\2\7\1\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\1\0\3\7\1\0\1\7"+
    "\1\44\2\7\1\0\1\7\1\0\1\7\2\45\1\7"+
    "\1\0\2\7\1\0\1\43\1\46\1\0\1\7\1\47"+
    "\1\0\1\7\1\0\2\7\2\50\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\51\1\0\2\7\2\0\1\7\2\52\1\53"+
    "\1\0\2\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\0\1\7\2\54\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\55\1\7\1\56\2\57\1\0"+
    "\1\7\1\60\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\2\61\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\2\62\2\63\1\0\1\7\1\64"+
    "\2\65\1\0\1\7\1\0\1\7\2\66\1\67\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\70\2\71\1\0"+
    "\1\7\1\0\1\7\2\72\2\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\231\0\314\0\377\0\u0132"+
    "\0\u0165\0\63\0\u0198\0\u01cb\0\63\0\u01fe\0\u0231\0\u0264"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\u0297\0\u02ca"+
    "\0\u02fd\0\63\0\63\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\63\0\63\0\63"+
    "\0\63\0\u01fe\0\63\0\u06c6\0\u0231\0\u06f9\0\63\0\63"+
    "\0\63\0\63\0\63\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\63\0\u0165"+
    "\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\63"+
    "\0\u01fe\0\u0231\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1"+
    "\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089"+
    "\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\u171c\0\u174f\0\u0165\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e"+
    "\0\u1881\0\63\0\u0165\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980"+
    "\0\u1980\0\u0165\0\u19b3\0\u19e6\0\u0165\0\u1a19\0\u1a4c\0\u1a7f"+
    "\0\u1ab2\0\u1ae5\0\63\0\u0165\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49"+
    "\0\u0165\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\63"+
    "\0\u0165\0\u0165\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\63\0\u0165\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277"+
    "\0\63\0\u0165\0\u22aa\0\63\0\63\0\u0165\0\u22dd\0\u2310"+
    "\0\u0165\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475"+
    "\0\63\0\u0165\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7"+
    "\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\63\0\u0165\0\63"+
    "\0\u0165\0\u26d9\0\u270c\0\u0165\0\63\0\u0165\0\u273f\0\u2772"+
    "\0\u27a5\0\u27d8\0\63\0\u0165\0\u0165\0\u280b\0\u283e\0\u2871"+
    "\0\u28a4\0\u28d7\0\u290a\0\63\0\u0165\0\63\0\u0165\0\u293d"+
    "\0\u2970\0\u29a3\0\u29d6\0\63\0\u0165\0\63\0\u0165";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\2\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\11\1\40\1\41\1\42\1\43\1\44\1\45\1\11"+
    "\1\46\1\47\1\50\1\51\1\11\1\52\1\53\1\11"+
    "\1\2\1\6\66\0\1\54\63\0\1\55\63\0\1\6"+
    "\54\0\1\6\6\0\2\7\62\0\1\56\57\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\6\11\1\0\2\11"+
    "\1\0\12\11\15\0\1\57\63\0\1\60\1\61\46\0"+
    "\4\62\1\0\10\62\1\63\1\64\44\62\4\65\1\0"+
    "\11\65\1\66\1\67\43\65\20\0\1\70\54\0\1\71"+
    "\62\0\1\72\62\0\1\73\53\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\1\11\1\74\4\11\1\0\2\11"+
    "\1\0\12\11\6\0\1\11\1\0\4\11\21\0\1\11"+
    "\1\0\1\75\2\11\1\76\2\11\1\0\2\11\1\0"+
    "\12\11\6\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\1\77\5\11\1\0\2\11\1\0\12\11\6\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\6\11\1\0\2\11"+
    "\1\100\1\101\11\11\6\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\102\1\103\1\11\1\0\12\11"+
    "\44\0\1\104\24\0\1\11\1\0\4\11\21\0\1\11"+
    "\1\0\5\11\1\105\1\0\2\11\1\0\12\11\6\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\2\11\1\0\3\11\1\106\6\11\53\0\1\107\15\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\2\11\1\0\2\11\1\110\7\11\6\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\1\11\1\111\4\11\1\0"+
    "\2\11\1\112\1\113\11\11\6\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\6\11\1\0\1\11\1\114\1\0"+
    "\1\11\1\115\10\11\6\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\1\116\1\117\4\11\1\0\1\11\1\120"+
    "\1\121\1\122\11\11\6\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\0\1\11\1\123\1\0\12\11"+
    "\6\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\1\11\1\124\1\0\1\11\1\125\10\11\6\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\2\11\1\0\1\11\1\126\10\11\3\0\2\54\1\127"+
    "\60\54\4\55\1\130\56\55\4\62\1\0\10\62\1\131"+
    "\1\64\44\62\4\65\1\0\11\65\1\66\1\132\43\65"+
    "\3\0\1\11\1\0\4\11\21\0\1\11\1\0\2\11"+
    "\1\133\3\11\1\0\2\11\1\0\6\11\1\134\3\11"+
    "\6\0\1\11\1\0\4\11\21\0\1\11\1\0\1\135"+
    "\5\11\1\0\2\11\1\0\12\11\6\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\6\11\1\0\2\11\1\136"+
    "\1\137\11\11\6\0\1\11\1\0\4\11\21\0\1\11"+
    "\1\0\6\11\1\0\2\11\1\0\1\11\1\140\10\11"+
    "\45\0\2\141\22\0\1\11\1\0\4\11\21\0\1\11"+
    "\1\0\6\11\1\141\1\142\1\11\1\0\12\11\44\0"+
    "\1\143\24\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\5\11\1\144\1\0\2\11\1\0\12\11\54\0\1\145"+
    "\14\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\2\11\1\0\3\11\1\146\6\11\6\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\6\11\1\0\2\11"+
    "\1\0\3\11\1\147\6\11\6\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\6\11\1\150\1\151\1\11\1\0"+
    "\12\11\37\0\1\152\31\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\1\153\5\11\1\0\2\11\1\0\12\11"+
    "\6\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\2\11\1\0\10\11\1\154\1\11\6\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\3\11\1\155\2\11"+
    "\1\0\2\11\1\0\2\11\1\156\7\11\6\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\5\11\1\157\1\0"+
    "\2\11\1\0\12\11\6\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\3\11\1\160\2\11\1\0\2\11\1\0"+
    "\12\11\6\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\0\7\11\1\161\2\11\40\0"+
    "\1\162\30\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\1\11\1\163\4\11\1\0\2\11\1\0\12\11\6\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\3\11\1\164"+
    "\2\11\1\0\2\11\1\165\1\166\11\11\6\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\1\167\5\11\1\0"+
    "\2\11\1\0\12\11\6\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\0\2\11\1\0\2\11\1\170"+
    "\7\11\6\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\0\7\11\1\171\2\11\3\0"+
    "\1\172\1\130\1\173\60\172\3\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\3\11\1\174\2\11\1\0\2\11"+
    "\1\0\12\11\6\0\1\11\1\0\4\11\21\0\1\11"+
    "\1\0\6\11\1\0\2\11\1\175\1\176\11\11\6\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\2\11\1\0\1\11\1\177\10\11\60\0\1\200\10\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\2\11\1\0\7\11\1\201\2\11\6\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\2\11\1\202\3\11\1\0"+
    "\2\11\1\0\2\11\1\203\7\11\55\0\1\204\13\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\2\11\1\0\4\11\1\205\5\11\47\0\1\206\21\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\1\11\1\207\1\0\12\11\44\0\1\210\24\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\5\11\1\211\1\0"+
    "\2\11\1\0\12\11\6\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\1\11\1\212\4\11\1\0\2\11\1\0"+
    "\12\11\54\0\1\213\14\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\0\2\11\1\0\3\11\1\214"+
    "\6\11\40\0\1\215\30\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\1\11\1\216\4\11\1\0\2\11\1\0"+
    "\12\11\6\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\0\4\11\1\217\5\11\6\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\2\11\1\0\1\11\1\220\10\11\6\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\6\11\1\0\2\11\1\221"+
    "\1\222\11\11\6\0\1\11\1\0\4\11\21\0\1\11"+
    "\1\0\1\11\1\223\4\11\1\0\2\11\1\0\12\11"+
    "\6\0\1\11\1\0\4\11\21\0\1\11\1\0\1\11"+
    "\1\224\4\11\1\0\2\11\1\0\12\11\6\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\6\11\1\0\1\11"+
    "\1\225\1\0\12\11\61\0\1\226\7\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\6\11\1\0\2\11\1\0"+
    "\10\11\1\227\1\11\6\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\230\1\231\1\11\1\0\12\11"+
    "\42\0\1\232\26\0\1\11\1\0\4\11\21\0\1\11"+
    "\1\0\3\11\1\233\2\11\1\0\2\11\1\0\12\11"+
    "\6\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\2\11\1\0\3\11\1\234\6\11\6\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\6\11\1\0\2\11"+
    "\1\235\1\236\11\11\6\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\0\2\11\1\0\11\11\1\237"+
    "\3\0\1\54\1\240\1\127\61\54\1\241\1\127\60\54"+
    "\3\0\1\11\1\0\4\11\21\0\1\11\1\0\4\11"+
    "\1\242\1\11\1\0\2\11\1\0\12\11\45\0\2\243"+
    "\22\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\243\1\244\1\11\1\0\12\11\6\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\1\245\5\11\1\0\2\11"+
    "\1\0\12\11\50\0\2\246\17\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\6\11\1\0\2\11\1\246\1\247"+
    "\11\11\6\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\250\1\251\11\11\6\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\5\11\1\252\1\0"+
    "\2\11\1\0\12\11\47\0\1\253\21\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\6\11\1\0\1\11\1\254"+
    "\1\0\12\11\37\0\1\255\31\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\1\256\5\11\1\0\2\11\1\0"+
    "\12\11\37\0\1\257\31\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\1\260\5\11\1\0\2\11\1\0\12\11"+
    "\6\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\261\1\262\1\11\1\0\12\11\37\0\1\263\31\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\1\264\5\11"+
    "\1\0\2\11\1\0\12\11\54\0\1\265\14\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\6\11\1\0\2\11"+
    "\1\0\3\11\1\266\6\11\6\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\6\11\1\0\2\11\1\267\1\270"+
    "\11\11\6\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\1\271\5\11\1\0\2\11\1\0\12\11\57\0\1\272"+
    "\11\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\2\11\1\0\6\11\1\273\3\11\6\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\6\11\1\0\2\11"+
    "\1\0\5\11\1\274\4\11\6\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\6\11\1\0\2\11\1\0\12\11"+
    "\1\275\52\0\1\276\15\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\0\2\11\1\0\2\11\1\277"+
    "\7\11\52\0\1\300\16\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\0\2\11\1\0\1\11\1\301"+
    "\10\11\6\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\1\11\1\302\1\0\12\11\56\0\1\303"+
    "\12\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\2\11\1\0\5\11\1\304\4\11\6\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\1\305\5\11\1\0"+
    "\2\11\1\0\12\11\4\0\1\172\133\0\1\306\13\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\2\11\1\0\4\11\1\307\5\11\61\0\1\310\7\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\2\11\1\0\10\11\1\311\1\11\40\0\1\312\30\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\1\11\1\313"+
    "\4\11\1\0\2\11\1\0\12\11\6\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\6\11\1\0\2\11\1\0"+
    "\3\11\1\314\6\11\50\0\2\315\17\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\6\11\1\0\2\11\1\315"+
    "\1\316\11\11\45\0\2\317\22\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\6\11\1\317\1\320\1\11\1\0"+
    "\12\11\45\0\2\321\22\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\321\1\322\1\11\1\0\12\11"+
    "\50\0\2\323\17\0\1\11\1\0\4\11\21\0\1\11"+
    "\1\0\6\11\1\0\2\11\1\323\1\324\11\11\54\0"+
    "\1\325\14\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\0\3\11\1\326\6\11\53\0"+
    "\1\327\15\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\0\2\11\1\330\7\11\52\0"+
    "\1\331\16\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\0\1\11\1\332\10\11\6\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\2\11\1\0\1\11\1\333\10\11\52\0\1\334\57\0"+
    "\1\335\21\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\1\11\1\336\1\0\12\11\50\0\2\337"+
    "\17\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\2\11\1\337\1\340\11\11\6\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\1\11\1\341\4\11\1\0"+
    "\2\11\1\0\12\11\37\0\1\342\31\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\1\343\5\11\1\0\2\11"+
    "\1\0\12\11\47\0\1\344\21\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\6\11\1\0\1\11\1\345\1\0"+
    "\12\11\55\0\1\346\13\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\0\2\11\1\0\4\11\1\347"+
    "\5\11\6\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\0\4\11\1\350\5\11\52\0"+
    "\1\351\16\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\0\1\11\1\352\10\11\47\0"+
    "\1\353\21\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\1\11\1\354\1\0\12\11\41\0\1\355"+
    "\27\0\1\11\1\0\4\11\21\0\1\11\1\0\2\11"+
    "\1\356\3\11\1\0\2\11\1\0\12\11\50\0\2\357"+
    "\17\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\2\11\1\357\1\360\11\11\47\0\1\361\21\0"+
    "\1\11\1\0\4\11\21\0\1\11\1\0\6\11\1\0"+
    "\1\11\1\362\1\0\12\11\6\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\6\11\1\0\2\11\1\0\10\11"+
    "\1\363\1\11\54\0\1\364\14\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\6\11\1\0\2\11\1\0\3\11"+
    "\1\365\6\11\52\0\1\366\16\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\6\11\1\0\2\11\1\0\1\11"+
    "\1\367\10\11\37\0\1\370\31\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\1\371\5\11\1\0\2\11\1\0"+
    "\12\11\47\0\1\372\21\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\0\1\11\1\373\1\0\12\11"+
    "\6\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\2\11\1\0\1\11\1\374\10\11\42\0\1\375"+
    "\26\0\1\11\1\0\4\11\21\0\1\11\1\0\3\11"+
    "\1\376\2\11\1\0\2\11\1\0\12\11\54\0\1\377"+
    "\14\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\2\11\1\0\3\11\1\u0100\6\11\52\0\1\u0101"+
    "\16\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\2\11\1\0\1\11\1\u0102\10\11\53\0\1\u0103"+
    "\15\0\1\11\1\0\4\11\21\0\1\11\1\0\6\11"+
    "\1\0\2\11\1\0\2\11\1\u0104\7\11\6\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\6\11\1\0\2\11"+
    "\1\0\1\11\1\u0105\10\11\47\0\1\u0106\21\0\1\11"+
    "\1\0\4\11\21\0\1\11\1\0\6\11\1\0\1\11"+
    "\1\u0107\1\0\12\11\37\0\1\u0108\31\0\1\11\1\0"+
    "\4\11\21\0\1\11\1\0\1\u0109\5\11\1\0\2\11"+
    "\1\0\12\11\50\0\2\u010a\17\0\1\11\1\0\4\11"+
    "\21\0\1\11\1\0\6\11\1\0\2\11\1\u010a\1\u010b"+
    "\11\11\61\0\1\u010c\7\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\6\11\1\0\2\11\1\0\10\11\1\u010d"+
    "\1\11\37\0\1\u010e\31\0\1\11\1\0\4\11\21\0"+
    "\1\11\1\0\1\u010f\5\11\1\0\2\11\1\0\12\11"+
    "\50\0\2\u0110\17\0\1\11\1\0\4\11\21\0\1\11"+
    "\1\0\6\11\1\0\2\11\1\u0110\1\u0111\11\11\52\0"+
    "\1\u0112\16\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\0\1\11\1\u0113\10\11\52\0"+
    "\1\u0114\16\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\0\1\11\1\u0115\10\11\61\0"+
    "\1\u0116\7\0\1\11\1\0\4\11\21\0\1\11\1\0"+
    "\6\11\1\0\2\11\1\0\10\11\1\u0117\1\11\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10761];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\5\1\1\11\2\1\1\11"+
    "\3\1\6\11\3\1\2\11\20\1\2\0\4\11\1\0"+
    "\1\11\3\0\5\11\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\11\2\1\1\0\6\1\1\0\5\1"+
    "\1\0\1\11\5\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\7\1\1\0"+
    "\2\1\1\0\4\1\2\0\1\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\3\1\1\0\4\1\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\2\0\1\1\1\11"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\2\1\2\11"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\2\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
//VARIALES Y METODOS DEL SCANER
public static LinkedList<String> tokens  = new LinkedList();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ALexicoC(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ALexicoC(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Error lexico: "+yytext());
          }
        case 60: break;
        case 2: 
          { tokens.add(yytext()); return new Symbol(sym.POR,yycolumn,yyline, new String("*"));
          }
        case 61: break;
        case 3: 
          { tokens.add(yytext()); return new Symbol(sym.DIV,yycolumn,yyline, new String("/"));
          }
        case 62: break;
        case 4: 
          { /* Se ignoran */
          }
        case 63: break;
        case 5: 
          { tokens.add(yytext()); return new Symbol(sym.num, yycolumn,yyline,new String(yytext()));
          }
        case 64: break;
        case 6: 
          { tokens.add(yytext()); return new Symbol(sym.PUNTO,yycolumn,yyline, new String("."));
          }
        case 65: break;
        case 7: 
          { tokens.add(yytext()); return new Symbol(sym.id, yycolumn,yyline,new String(yytext()));
          }
        case 66: break;
        case 8: 
          { tokens.add(yytext()); return new Symbol(sym.DOSP,yycolumn,yyline, new String(":"));
          }
        case 67: break;
        case 9: 
          { tokens.add(yytext()); return new Symbol(sym.IGUAL,yycolumn,yyline, new String("="));
          }
        case 68: break;
        case 10: 
          { tokens.add(yytext()); return new Symbol(sym.MENOS,yycolumn,yyline, new String("-"));
          }
        case 69: break;
        case 11: 
          { tokens.add(yytext()); return new Symbol(sym.D,yycolumn,yyline, new String(yytext()));
          }
        case 70: break;
        case 12: 
          { tokens.add(yytext()); return new Symbol(sym.COMILLA,yycolumn,yyline, new String("\""));
          }
        case 71: break;
        case 13: 
          { tokens.add(yytext()); return new Symbol(sym.MAS,yycolumn,yyline, new String("+"));
          }
        case 72: break;
        case 14: 
          { return new Symbol(sym.POTENC,yycolumn,yyline, new String("^"));
          }
        case 73: break;
        case 15: 
          { tokens.add(yytext()); return new Symbol(sym.PARA,yycolumn,yyline, new String("("));
          }
        case 74: break;
        case 16: 
          { tokens.add(yytext()); return new Symbol(sym.PARC,yycolumn,yyline, new String(")"));
          }
        case 75: break;
        case 17: 
          { tokens.add(yytext()); return new Symbol(sym.LLAVEA,yycolumn,yyline, new String("{"));
          }
        case 76: break;
        case 18: 
          { tokens.add(yytext()); return new Symbol(sym.LLAVEC,yycolumn,yyline, new String("}"));
          }
        case 77: break;
        case 19: 
          { tokens.add(yytext()); return new Symbol(sym.PUNTOC,yycolumn,yyline, new String(";"));
          }
        case 78: break;
        case 20: 
          { tokens.add(yytext()); return new Symbol(sym.MNR,yycolumn,yyline, new String("<"));
          }
        case 79: break;
        case 21: 
          { tokens.add(yytext()); return new Symbol(sym.MYR,yycolumn,yyline, new String(">"));
          }
        case 80: break;
        case 22: 
          { tokens.add(yytext()); return new Symbol(sym.BAJO,yycolumn,yyline, new String("_"));
          }
        case 81: break;
        case 23: 
          { tokens.add(yytext()); return new Symbol(sym.COMA,yycolumn,yyline, new String(","));
          }
        case 82: break;
        case 24: 
          { tokens.add(yytext()); return new Symbol(sym.PUNTOS,yycolumn,yyline, new String(".."));
          }
        case 83: break;
        case 25: 
          { tokens.add(yytext()); return new Symbol(sym.IGUALI,yycolumn,yyline, new String("=="));
          }
        case 84: break;
        case 26: 
          { tokens.add(yytext()); return new Symbol(sym.MENOSM,yycolumn,yyline, new String("--"));
          }
        case 85: break;
        case 27: 
          { tokens.add(yytext()); return new Symbol(sym.MD,yycolumn,yyline, new String(yytext()));
          }
        case 86: break;
        case 28: 
          { tokens.add(yytext());  return new Symbol(sym.CADSPACE,yycolumn,yyline, new String(yytext()));
          }
        case 87: break;
        case 29: 
          { tokens.add(yytext());  return new Symbol(sym.CACHAR,yycolumn,yyline, new String(yytext()));
          }
        case 88: break;
        case 30: 
          { tokens.add(yytext()); return new Symbol(sym.MASM,yycolumn,yyline, new String("++"));
          }
        case 89: break;
        case 31: 
          { tokens.add(yytext()); return new Symbol(sym.MNREQ,yycolumn,yyline, new String("<="));
          }
        case 90: break;
        case 32: 
          { tokens.add(yytext()); return new Symbol(sym.MYREQ,yycolumn,yyline, new String(">="));
          }
        case 91: break;
        case 33: 
          { tokens.add(yytext()); return new Symbol(sym.NOIGUAL,yycolumn,yyline, new String("!="));
          }
        case 92: break;
        case 34: 
          { tokens.add(yytext()); return new Symbol(sym.IDE,yycolumn,yyline, new String(yytext()));
          }
        case 93: break;
        case 35: 
          { tokens.add(yytext()); /* Se ignoran */
          }
        case 94: break;
        case 36: 
          { tokens.add(yytext()); return new Symbol(sym.TRUE,yycolumn,yyline, new String(yytext()));
          }
        case 95: break;
        case 37: 
          { tokens.add(yytext()); return new Symbol(sym.FAIL,yycolumn,yyline, new String(yytext()));
          }
        case 96: break;
        case 38: 
          { tokens.add(yytext()); return new Symbol(sym.REPLY,yycolumn,yyline, new String(yytext()));
          }
        case 97: break;
        case 39: 
          { tokens.add(yytext()); return new Symbol(sym.ER,yycolumn,yyline, new String(yytext()));
          }
        case 98: break;
        case 40: 
          { tokens.add(yytext()); return new Symbol(sym.LIST,yycolumn,yyline, new String(yytext()));
          }
        case 99: break;
        case 41: 
          { tokens.add(yytext()); return new Symbol(sym.COLOR,yycolumn,yyline, new String(yytext()));
          }
        case 100: break;
        case 42: 
          { tokens.add(yytext()); return new Symbol(sym.FALSE,yycolumn,yyline, new String(yytext()));
          }
        case 101: break;
        case 43: 
          { tokens.add(yytext()); return new Symbol(sym.MARC,yycolumn,yyline, new String(yytext()));
          }
        case 102: break;
        case 44: 
          { tokens.add(yytext()); return new Symbol(sym.ACCESS,yycolumn,yyline, new String(yytext()));
          }
        case 103: break;
        case 45: 
          { tokens.add(yytext()); return new Symbol(sym.COD,yycolumn,yyline, new String(yytext()));
          }
        case 104: break;
        case 46: 
          { tokens.add(yytext()); return new Symbol(sym.TAM,yycolumn,yyline, new String(yytext()));
          }
        case 105: break;
        case 47: 
          { tokens.add(yytext()); return new Symbol(sym.TIE,yycolumn,yyline, new String(yytext()));
          }
        case 106: break;
        case 48: 
          { tokens.add(yytext()); return new Symbol(sym.NOM,yycolumn,yyline, new String(yytext()));
          }
        case 107: break;
        case 49: 
          { tokens.add(yytext()); return new Symbol(sym.USER,yycolumn,yyline, new String(yytext()));
          }
        case 108: break;
        case 50: 
          { tokens.add(yytext()); return new Symbol(sym.REG,yycolumn,yyline, new String(yytext()));
          }
        case 109: break;
        case 51: 
          { tokens.add(yytext()); return new Symbol(sym.SUP,yycolumn,yyline, new String(yytext()));
          }
        case 110: break;
        case 52: 
          { tokens.add(yytext()); return new Symbol(sym.PROD,yycolumn,yyline, new String(yytext()));
          }
        case 111: break;
        case 53: 
          { tokens.add(yytext()); return new Symbol(sym.SUC,yycolumn,yyline, new String(yytext()));
          }
        case 112: break;
        case 54: 
          { tokens.add(yytext()); return new Symbol(sym.CANT,yycolumn,yyline, new String(yytext()));
          }
        case 113: break;
        case 55: 
          { tokens.add(yytext()); return new Symbol(sym.TEL,yycolumn,yyline, new String(yytext()));
          }
        case 114: break;
        case 56: 
          { tokens.add(yytext()); return new Symbol(sym.DIR,yycolumn,yyline, new String(yytext()));
          }
        case 115: break;
        case 57: 
          { tokens.add(yytext()); return new Symbol(sym.MOD,yycolumn,yyline, new String(yytext()));
          }
        case 116: break;
        case 58: 
          { tokens.add(yytext()); return new Symbol(sym.PROP,yycolumn,yyline, new String(yytext()));
          }
        case 117: break;
        case 59: 
          { tokens.add(yytext()); return new Symbol(sym.DES,yycolumn,yyline, new String(yytext()));
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
